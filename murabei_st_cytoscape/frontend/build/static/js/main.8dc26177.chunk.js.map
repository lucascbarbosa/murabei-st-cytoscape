{"version":3,"sources":["index.tsx"],"names":["cytoscape","use","fcose","klay","div","document","body","appendChild","createElement","args","updateComponent","cy","Streamlit","setComponentValue","$","map","x","events","addEventListener","RENDER_EVENT","event","data","detail","newArgs","JSON","stringify","style","width","height","nodeColor","_data$theme","_data$theme2","_data$theme3","_data$theme4","_data$theme5","_data$theme6","theme","backgroundColor","background","selector","primaryColor","color","textColor","fontFamily","font","targetArrowColor","lineColor","container","elements","concat","layout","selectionType","userZoomingEnabled","userPanningEnabled","minZoom","maxZoom","wheelSensitivity","on","setFrameHeight","setComponentReady"],"mappings":"8JAAA,kEAWAA,IAAUC,IAAIC,KACdF,IAAUC,IAAIE,KAEd,MAAMC,EAAMC,SAASC,KAAKC,YAAYF,SAASG,cAAc,QAC7D,IAAIC,EAAO,GAEX,SAASC,EAAgBC,GACvBC,IAAUC,kBAAkB,CAC1B,MAASF,EAAGG,EAAE,iBAAiBC,IAAKC,GAAWA,EAAY,SAAQ,KAAM,IACzE,MAASL,EAAGG,EAAE,iBAAiBC,IAAKC,GAAWA,EAAY,SAAQ,KAAM,MAoE7EJ,IAAUK,OAAOC,iBAAiBN,IAAUO,cA3D5C,SAAkBC,GAEhB,MAAMC,EAAQD,EAAkCE,OAChD,IAAIC,EAAUC,KAAKC,UAAUJ,EAAKZ,MAClC,IAAKY,EAAKZ,KAAU,KAAKA,IAASc,EAAS,CACzCd,EAAOc,EAGPnB,EAAIsB,MAAMC,MAAQN,EAAKZ,KAAY,MACnCL,EAAIsB,MAAME,OAASP,EAAKZ,KAAa,OAGrC,IAAIoB,EAAmB,GACN,IAADC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAhB,GAAId,EAAKe,OACO,QAAdN,EAAIT,EAAKe,aAAK,IAAAN,OAAA,EAAVA,EAAYO,mBACdjC,EAAIsB,MAAMY,WAAajB,EAAKe,MAAMC,iBAEpCR,EAAY,CAAC,CACXU,SAAU,gBACVb,MAAO,CACLW,gBAA2B,QAAZN,EAAEV,EAAKe,aAAK,IAAAL,OAAA,EAAVA,EAAYS,eAE9B,CACDD,SAAU,OACVb,MAAO,CACLe,MAAiB,QAAZT,EAAEX,EAAKe,aAAK,IAAAJ,OAAA,EAAVA,EAAYU,UACnBC,WAAsB,QAAZV,EAAEZ,EAAKe,aAAK,IAAAH,OAAA,EAAVA,EAAYW,OAEzB,CACDL,SAAU,gBACVb,MAAO,CACLmB,iBAA4B,QAAZX,EAAEb,EAAKe,aAAK,IAAAF,OAAA,EAAVA,EAAYM,aAC9BM,UAAqB,QAAZX,EAAEd,EAAKe,aAAK,IAAAD,OAAA,EAAVA,EAAYK,gBAM7B,IAAI7B,EAAKX,IAAU,CACjB+C,UAAW3C,EACX4C,SAAU3B,EAAKZ,KAAe,SAC9BiB,MAAOL,EAAKZ,KAAiB,WAAEwC,OAAOpB,GACtCqB,OAAQ7B,EAAKZ,KAAa,OAC1B0C,cAAe9B,EAAKZ,KAAoB,cACxC2C,mBAAoB/B,EAAKZ,KAAyB,mBAClD4C,mBAAoBhC,EAAKZ,KAAyB,mBAClD6C,QAASjC,EAAKZ,KAAc,QAC5B8C,QAASlC,EAAKZ,KAAc,QAC5B+C,iBAAkBnC,EAAKZ,KAAuB,mBAC7CgD,GAAG,mBAAmB,WACvB/C,EAAgBC,MAElBD,EAAgBC,GAGlBC,IAAU8C,oBAQZ9C,IAAU+C,oBAIV/C,IAAU8C,mB","file":"static/js/main.8dc26177.chunk.js","sourcesContent":["import {\n  Streamlit,\n  RenderData\n} from \"streamlit-component-lib\"\n// @ts-ignore\nimport cytoscape from 'cytoscape';\n// @ts-ignore\nimport fcose from 'cytoscape-fcose';\n// @ts-ignore\nimport klay from 'cytoscape-klay';\n\ncytoscape.use(fcose);\ncytoscape.use(klay);\n\nconst div = document.body.appendChild(document.createElement(\"div\"));\nlet args = '';\n\nfunction updateComponent(cy: any) {\n  Streamlit.setComponentValue({\n    'nodes': cy.$('node:selected').map((x: any) => x['_private']['data']['id']),\n    'edges': cy.$('edge:selected').map((x: any) => x['_private']['data']['id'])\n  })\n}\n\n/**\n * The component's render function. This will be called immediately after\n * the component is initially loaded, and then again every time the\n * component gets new data from Python.\n */\nfunction onRender(event: Event): void {\n  // Get the RenderData from the event\n  const data = (event as CustomEvent<RenderData>).detail\n  let newArgs = JSON.stringify(data.args);\n  if (!data.args[\"key\"] || args !== newArgs) {\n    args = newArgs;\n\n    // Update the dimension of the graph's container\n    div.style.width = data.args[\"width\"];\n    div.style.height = data.args[\"height\"];\n\n    // Take into account the Streamlit theme\n    let nodeColor: any[] = [];\n    if (data.theme) {\n      if (data.theme?.backgroundColor) {\n        div.style.background = data.theme.backgroundColor;\n      }\n      nodeColor = [{\n        selector: \"node:selected\",\n        style: {\n          backgroundColor: data.theme?.primaryColor\n        }\n      }, {\n        selector: \"node\",\n        style: {\n          color: data.theme?.textColor,\n          fontFamily: data.theme?.font\n        }\n      }, {\n        selector: \"edge:selected\",\n        style: {\n          targetArrowColor: data.theme?.primaryColor,\n          lineColor: data.theme?.primaryColor\n        }\n      }]\n    }\n\n    //Create the Cytoscape Graph\n    let cy = cytoscape({\n      container: div,\n      elements: data.args[\"elements\"],\n      style: data.args[\"stylesheet\"].concat(nodeColor),\n      layout: data.args[\"layout\"],\n      selectionType: data.args[\"selectionType\"],\n      userZoomingEnabled: data.args[\"userZoomingEnabled\"],\n      userPanningEnabled: data.args[\"userPanningEnabled\"],\n      minZoom: data.args[\"minZoom\"],\n      maxZoom: data.args[\"maxZoom\"],\n      wheelSensitivity: data.args[\"wheelSensitivity\"],\n    }).on('select unselect', function () {\n      updateComponent(cy);\n    });\n    updateComponent(cy);\n  }\n\n  Streamlit.setFrameHeight()\n}\n\n// Attach our `onRender` handler to Streamlit's render event.\nStreamlit.events.addEventListener(Streamlit.RENDER_EVENT, onRender)\n\n// Tell Streamlit we're ready to start receiving data. We won't get our\n// first RENDER_EVENT until we call this function.\nStreamlit.setComponentReady()\n\n// Finally, tell Streamlit to update our initial height. We omit the\n// `height` parameter here to have it default to our scrollHeight.\nStreamlit.setFrameHeight()\n"],"sourceRoot":""}