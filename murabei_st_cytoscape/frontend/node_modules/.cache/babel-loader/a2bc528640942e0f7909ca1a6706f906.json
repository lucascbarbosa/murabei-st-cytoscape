{"ast":null,"code":"// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { valueToString } from '../util/pretty';\nimport { BigIntAvailable } from '../util/compat';\n/**\n * Dynamically compile the null values into an `isValid()` function whose\n * implementation is a switch statement. Microbenchmarks in v8 indicate\n * this approach is 25% faster than using an ES6 Map.\n *\n * @example\n * console.log(createIsValidFunction([null, 'N/A', NaN]));\n * `function (x) {\n *     if (x !== x) return false;\n *     switch (x) {\n *         case null:\n *         case \"N/A\":\n *             return false;\n *     }\n *     return true;\n * }`\n *\n * @ignore\n * @param nullValues\n */\nexport function createIsValidFunction(nullValues) {\n  if (!nullValues || nullValues.length <= 0) {\n    // @ts-ignore\n    return function isValid(value) {\n      return true;\n    };\n  }\n  let fnBody = '';\n  let noNaNs = nullValues.filter(x => x === x);\n  if (noNaNs.length > 0) {\n    fnBody = `\n    switch (x) {${noNaNs.map(x => `\n        case ${valueToCase(x)}:`).join('')}\n            return false;\n    }`;\n  }\n  // NaN doesn't equal anything including itself, so it doesn't work as a\n  // switch case. Instead we must explicitly check for NaN before the switch.\n  if (nullValues.length !== noNaNs.length) {\n    fnBody = `if (x !== x) return false;\\n${fnBody}`;\n  }\n  return new Function(`x`, `${fnBody}\\nreturn true;`);\n}\n/** @ignore */\nfunction valueToCase(x) {\n  if (typeof x !== 'bigint') {\n    return valueToString(x);\n  } else if (BigIntAvailable) {\n    return `${valueToString(x)}n`;\n  }\n  return `\"${valueToString(x)}\"`;\n}","map":{"version":3,"sources":["builder/valid.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA,SAAS,aAAa,QAAQ,gBAAgB;AAC9C,SAAS,eAAe,QAAQ,gBAAgB;AAEhD;;;;;;;;;;;;;;;;;;;AAmBG;AACH,OAAM,SAAU,qBAAqB,CAAwC,UAAiC,EAAA;EAE1G,IAAI,CAAC,UAAU,IAAI,UAAU,CAAC,MAAM,IAAI,CAAC,EAAE;IACvC;IACA,OAAO,SAAS,OAAO,CAAC,KAAU,EAAA;MAAI,OAAO,IAAI;IAAE,CAAC;EACvD;EAED,IAAI,MAAM,GAAG,EAAE;EACf,IAAI,MAAM,GAAG,UAAU,CAAC,MAAM,CAAE,CAAC,IAAK,CAAC,KAAK,CAAC,CAAC;EAE9C,IAAI,MAAM,CAAC,MAAM,GAAG,CAAC,EAAE;IACnB,MAAM,GAAG;kBACC,MAAM,CAAC,GAAG,CAAE,CAAC,IAAK;eACrB,WAAW,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,EAAE,CAAC;;MAEpC;EACD;EAED;EACA;EACA,IAAI,UAAU,CAAC,MAAM,KAAK,MAAM,CAAC,MAAM,EAAE;IACrC,MAAM,GAAG,+BAA+B,MAAM,EAAE;EACnD;EAED,OAAO,IAAI,QAAQ,CAAC,GAAG,EAAE,GAAG,MAAM,gBAAgB,CAA4C;AAClG;AAEA;AACA,SAAS,WAAW,CAAC,CAAM,EAAA;EACvB,IAAI,OAAO,CAAC,KAAK,QAAQ,EAAE;IACvB,OAAO,aAAa,CAAC,CAAC,CAAC;GAC1B,MAAM,IAAI,eAAe,EAAE;IACxB,OAAO,GAAG,aAAa,CAAC,CAAC,CAAC,GAAG;EAChC;EACD,OAAO,IAAI,aAAa,CAAC,CAAC,CAAC,GAAG;AAClC","sourcesContent":["// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { DataType } from '../type';\nimport { valueToString } from '../util/pretty';\nimport { BigIntAvailable } from '../util/compat';\n\n/**\n * Dynamically compile the null values into an `isValid()` function whose\n * implementation is a switch statement. Microbenchmarks in v8 indicate\n * this approach is 25% faster than using an ES6 Map.\n *\n * @example\n * console.log(createIsValidFunction([null, 'N/A', NaN]));\n * `function (x) {\n *     if (x !== x) return false;\n *     switch (x) {\n *         case null:\n *         case \"N/A\":\n *             return false;\n *     }\n *     return true;\n * }`\n *\n * @ignore\n * @param nullValues\n */\nexport function createIsValidFunction<T extends DataType = any, TNull = any>(nullValues?: ReadonlyArray<TNull>) {\n\n    if (!nullValues || nullValues.length <= 0) {\n        // @ts-ignore\n        return function isValid(value: any) { return true; };\n    }\n\n    let fnBody = '';\n    let noNaNs = nullValues.filter((x) => x === x);\n\n    if (noNaNs.length > 0) {\n        fnBody = `\n    switch (x) {${noNaNs.map((x) => `\n        case ${valueToCase(x)}:`).join('')}\n            return false;\n    }`;\n    }\n\n    // NaN doesn't equal anything including itself, so it doesn't work as a\n    // switch case. Instead we must explicitly check for NaN before the switch.\n    if (nullValues.length !== noNaNs.length) {\n        fnBody = `if (x !== x) return false;\\n${fnBody}`;\n    }\n\n    return new Function(`x`, `${fnBody}\\nreturn true;`) as (value: T['TValue'] | TNull) => boolean;\n}\n\n/** @ignore */\nfunction valueToCase(x: any) {\n    if (typeof x !== 'bigint') {\n        return valueToString(x);\n    } else if (BigIntAvailable) {\n        return `${valueToString(x)}n`;\n    }\n    return `\"${valueToString(x)}\"`;\n}\n"]},"metadata":{},"sourceType":"module"}