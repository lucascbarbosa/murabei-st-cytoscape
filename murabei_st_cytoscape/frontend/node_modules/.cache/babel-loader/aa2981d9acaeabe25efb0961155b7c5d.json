{"ast":null,"code":"// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { instance as comparer } from './visitor/typecomparator';\nimport { Type, Precision, UnionMode, DateUnit, TimeUnit, IntervalUnit } from './enum';\n/**\n * An abstract base class for classes that encapsulate metadata about each of\n * the logical types that Arrow can represent.\n */\nexport class DataType {\n  /** @nocollapse */static isNull(x) {\n    return x && x.typeId === Type.Null;\n  }\n  /** @nocollapse */\n  static isInt(x) {\n    return x && x.typeId === Type.Int;\n  }\n  /** @nocollapse */\n  static isFloat(x) {\n    return x && x.typeId === Type.Float;\n  }\n  /** @nocollapse */\n  static isBinary(x) {\n    return x && x.typeId === Type.Binary;\n  }\n  /** @nocollapse */\n  static isUtf8(x) {\n    return x && x.typeId === Type.Utf8;\n  }\n  /** @nocollapse */\n  static isBool(x) {\n    return x && x.typeId === Type.Bool;\n  }\n  /** @nocollapse */\n  static isDecimal(x) {\n    return x && x.typeId === Type.Decimal;\n  }\n  /** @nocollapse */\n  static isDate(x) {\n    return x && x.typeId === Type.Date;\n  }\n  /** @nocollapse */\n  static isTime(x) {\n    return x && x.typeId === Type.Time;\n  }\n  /** @nocollapse */\n  static isTimestamp(x) {\n    return x && x.typeId === Type.Timestamp;\n  }\n  /** @nocollapse */\n  static isInterval(x) {\n    return x && x.typeId === Type.Interval;\n  }\n  /** @nocollapse */\n  static isList(x) {\n    return x && x.typeId === Type.List;\n  }\n  /** @nocollapse */\n  static isStruct(x) {\n    return x && x.typeId === Type.Struct;\n  }\n  /** @nocollapse */\n  static isUnion(x) {\n    return x && x.typeId === Type.Union;\n  }\n  /** @nocollapse */\n  static isFixedSizeBinary(x) {\n    return x && x.typeId === Type.FixedSizeBinary;\n  }\n  /** @nocollapse */\n  static isFixedSizeList(x) {\n    return x && x.typeId === Type.FixedSizeList;\n  }\n  /** @nocollapse */\n  static isMap(x) {\n    return x && x.typeId === Type.Map;\n  }\n  /** @nocollapse */\n  static isDictionary(x) {\n    return x && x.typeId === Type.Dictionary;\n  }\n  get typeId() {\n    return Type.NONE;\n  }\n  compareTo(other) {\n    return comparer.visit(this, other);\n  }\n}\nDataType[Symbol.toStringTag] = (proto => {\n  proto.children = null;\n  proto.ArrayType = Array;\n  return proto[Symbol.toStringTag] = 'DataType';\n})(DataType.prototype);\n/** @ignore */\nexport class Null extends DataType {\n  toString() {\n    return `Null`;\n  }\n  get typeId() {\n    return Type.Null;\n  }\n}\nNull[Symbol.toStringTag] = (proto => {\n  return proto[Symbol.toStringTag] = 'Null';\n})(Null.prototype);\n/** @ignore */\nclass Int_ extends DataType {\n  constructor(isSigned, bitWidth) {\n    super();\n    this.isSigned = isSigned;\n    this.bitWidth = bitWidth;\n  }\n  get typeId() {\n    return Type.Int;\n  }\n  get ArrayType() {\n    switch (this.bitWidth) {\n      case 8:\n        return this.isSigned ? Int8Array : Uint8Array;\n      case 16:\n        return this.isSigned ? Int16Array : Uint16Array;\n      case 32:\n        return this.isSigned ? Int32Array : Uint32Array;\n      case 64:\n        return this.isSigned ? Int32Array : Uint32Array;\n    }\n    throw new Error(`Unrecognized ${this[Symbol.toStringTag]} type`);\n  }\n  toString() {\n    return `${this.isSigned ? `I` : `Ui`}nt${this.bitWidth}`;\n  }\n}\nInt_[Symbol.toStringTag] = (proto => {\n  proto.isSigned = null;\n  proto.bitWidth = null;\n  return proto[Symbol.toStringTag] = 'Int';\n})(Int_.prototype);\nexport { Int_ as Int };\n/** @ignore */\nexport class Int8 extends Int_ {\n  constructor() {\n    super(true, 8);\n  }\n}\n/** @ignore */\nexport class Int16 extends Int_ {\n  constructor() {\n    super(true, 16);\n  }\n}\n/** @ignore */\nexport class Int32 extends Int_ {\n  constructor() {\n    super(true, 32);\n  }\n}\n/** @ignore */\nexport class Int64 extends Int_ {\n  constructor() {\n    super(true, 64);\n  }\n}\n/** @ignore */\nexport class Uint8 extends Int_ {\n  constructor() {\n    super(false, 8);\n  }\n}\n/** @ignore */\nexport class Uint16 extends Int_ {\n  constructor() {\n    super(false, 16);\n  }\n}\n/** @ignore */\nexport class Uint32 extends Int_ {\n  constructor() {\n    super(false, 32);\n  }\n}\n/** @ignore */\nexport class Uint64 extends Int_ {\n  constructor() {\n    super(false, 64);\n  }\n}\nObject.defineProperty(Int8.prototype, 'ArrayType', {\n  value: Int8Array\n});\nObject.defineProperty(Int16.prototype, 'ArrayType', {\n  value: Int16Array\n});\nObject.defineProperty(Int32.prototype, 'ArrayType', {\n  value: Int32Array\n});\nObject.defineProperty(Int64.prototype, 'ArrayType', {\n  value: Int32Array\n});\nObject.defineProperty(Uint8.prototype, 'ArrayType', {\n  value: Uint8Array\n});\nObject.defineProperty(Uint16.prototype, 'ArrayType', {\n  value: Uint16Array\n});\nObject.defineProperty(Uint32.prototype, 'ArrayType', {\n  value: Uint32Array\n});\nObject.defineProperty(Uint64.prototype, 'ArrayType', {\n  value: Uint32Array\n});\n/** @ignore */\nexport class Float extends DataType {\n  constructor(precision) {\n    super();\n    this.precision = precision;\n  }\n  get typeId() {\n    return Type.Float;\n  }\n  get ArrayType() {\n    switch (this.precision) {\n      case Precision.HALF:\n        return Uint16Array;\n      case Precision.SINGLE:\n        return Float32Array;\n      case Precision.DOUBLE:\n        return Float64Array;\n    }\n    throw new Error(`Unrecognized ${this[Symbol.toStringTag]} type`);\n  }\n  toString() {\n    return `Float${this.precision << 5 || 16}`;\n  }\n}\nFloat[Symbol.toStringTag] = (proto => {\n  proto.precision = null;\n  return proto[Symbol.toStringTag] = 'Float';\n})(Float.prototype);\n/** @ignore */\nexport class Float16 extends Float {\n  constructor() {\n    super(Precision.HALF);\n  }\n}\n/** @ignore */\nexport class Float32 extends Float {\n  constructor() {\n    super(Precision.SINGLE);\n  }\n}\n/** @ignore */\nexport class Float64 extends Float {\n  constructor() {\n    super(Precision.DOUBLE);\n  }\n}\nObject.defineProperty(Float16.prototype, 'ArrayType', {\n  value: Uint16Array\n});\nObject.defineProperty(Float32.prototype, 'ArrayType', {\n  value: Float32Array\n});\nObject.defineProperty(Float64.prototype, 'ArrayType', {\n  value: Float64Array\n});\n/** @ignore */\nexport class Binary extends DataType {\n  constructor() {\n    super();\n  }\n  get typeId() {\n    return Type.Binary;\n  }\n  toString() {\n    return `Binary`;\n  }\n}\nBinary[Symbol.toStringTag] = (proto => {\n  proto.ArrayType = Uint8Array;\n  return proto[Symbol.toStringTag] = 'Binary';\n})(Binary.prototype);\n/** @ignore */\nexport class Utf8 extends DataType {\n  constructor() {\n    super();\n  }\n  get typeId() {\n    return Type.Utf8;\n  }\n  toString() {\n    return `Utf8`;\n  }\n}\nUtf8[Symbol.toStringTag] = (proto => {\n  proto.ArrayType = Uint8Array;\n  return proto[Symbol.toStringTag] = 'Utf8';\n})(Utf8.prototype);\n/** @ignore */\nexport class Bool extends DataType {\n  constructor() {\n    super();\n  }\n  get typeId() {\n    return Type.Bool;\n  }\n  toString() {\n    return `Bool`;\n  }\n}\nBool[Symbol.toStringTag] = (proto => {\n  proto.ArrayType = Uint8Array;\n  return proto[Symbol.toStringTag] = 'Bool';\n})(Bool.prototype);\n/** @ignore */\nexport class Decimal extends DataType {\n  constructor(scale, precision) {\n    super();\n    this.scale = scale;\n    this.precision = precision;\n  }\n  get typeId() {\n    return Type.Decimal;\n  }\n  toString() {\n    return `Decimal[${this.precision}e${this.scale > 0 ? `+` : ``}${this.scale}]`;\n  }\n}\nDecimal[Symbol.toStringTag] = (proto => {\n  proto.scale = null;\n  proto.precision = null;\n  proto.ArrayType = Uint32Array;\n  return proto[Symbol.toStringTag] = 'Decimal';\n})(Decimal.prototype);\n/** @ignore */\nexport class Date_ extends DataType {\n  constructor(unit) {\n    super();\n    this.unit = unit;\n  }\n  get typeId() {\n    return Type.Date;\n  }\n  toString() {\n    return `Date${(this.unit + 1) * 32}<${DateUnit[this.unit]}>`;\n  }\n}\nDate_[Symbol.toStringTag] = (proto => {\n  proto.unit = null;\n  proto.ArrayType = Int32Array;\n  return proto[Symbol.toStringTag] = 'Date';\n})(Date_.prototype);\n/** @ignore */\nexport class DateDay extends Date_ {\n  constructor() {\n    super(DateUnit.DAY);\n  }\n}\n/** @ignore */\nexport class DateMillisecond extends Date_ {\n  constructor() {\n    super(DateUnit.MILLISECOND);\n  }\n}\n/** @ignore */\nclass Time_ extends DataType {\n  constructor(unit, bitWidth) {\n    super();\n    this.unit = unit;\n    this.bitWidth = bitWidth;\n  }\n  get typeId() {\n    return Type.Time;\n  }\n  toString() {\n    return `Time${this.bitWidth}<${TimeUnit[this.unit]}>`;\n  }\n}\nTime_[Symbol.toStringTag] = (proto => {\n  proto.unit = null;\n  proto.bitWidth = null;\n  proto.ArrayType = Int32Array;\n  return proto[Symbol.toStringTag] = 'Time';\n})(Time_.prototype);\nexport { Time_ as Time };\n/** @ignore */\nexport class TimeSecond extends Time_ {\n  constructor() {\n    super(TimeUnit.SECOND, 32);\n  }\n}\n/** @ignore */\nexport class TimeMillisecond extends Time_ {\n  constructor() {\n    super(TimeUnit.MILLISECOND, 32);\n  }\n}\n/** @ignore */\nexport class TimeMicrosecond extends Time_ {\n  constructor() {\n    super(TimeUnit.MICROSECOND, 64);\n  }\n}\n/** @ignore */\nexport class TimeNanosecond extends Time_ {\n  constructor() {\n    super(TimeUnit.NANOSECOND, 64);\n  }\n}\n/** @ignore */\nclass Timestamp_ extends DataType {\n  constructor(unit, timezone) {\n    super();\n    this.unit = unit;\n    this.timezone = timezone;\n  }\n  get typeId() {\n    return Type.Timestamp;\n  }\n  toString() {\n    return `Timestamp<${TimeUnit[this.unit]}${this.timezone ? `, ${this.timezone}` : ``}>`;\n  }\n}\nTimestamp_[Symbol.toStringTag] = (proto => {\n  proto.unit = null;\n  proto.timezone = null;\n  proto.ArrayType = Int32Array;\n  return proto[Symbol.toStringTag] = 'Timestamp';\n})(Timestamp_.prototype);\nexport { Timestamp_ as Timestamp };\n/** @ignore */\nexport class TimestampSecond extends Timestamp_ {\n  constructor(timezone) {\n    super(TimeUnit.SECOND, timezone);\n  }\n}\n/** @ignore */\nexport class TimestampMillisecond extends Timestamp_ {\n  constructor(timezone) {\n    super(TimeUnit.MILLISECOND, timezone);\n  }\n}\n/** @ignore */\nexport class TimestampMicrosecond extends Timestamp_ {\n  constructor(timezone) {\n    super(TimeUnit.MICROSECOND, timezone);\n  }\n}\n/** @ignore */\nexport class TimestampNanosecond extends Timestamp_ {\n  constructor(timezone) {\n    super(TimeUnit.NANOSECOND, timezone);\n  }\n}\n/** @ignore */\nclass Interval_ extends DataType {\n  constructor(unit) {\n    super();\n    this.unit = unit;\n  }\n  get typeId() {\n    return Type.Interval;\n  }\n  toString() {\n    return `Interval<${IntervalUnit[this.unit]}>`;\n  }\n}\nInterval_[Symbol.toStringTag] = (proto => {\n  proto.unit = null;\n  proto.ArrayType = Int32Array;\n  return proto[Symbol.toStringTag] = 'Interval';\n})(Interval_.prototype);\nexport { Interval_ as Interval };\n/** @ignore */\nexport class IntervalDayTime extends Interval_ {\n  constructor() {\n    super(IntervalUnit.DAY_TIME);\n  }\n}\n/** @ignore */\nexport class IntervalYearMonth extends Interval_ {\n  constructor() {\n    super(IntervalUnit.YEAR_MONTH);\n  }\n}\n/** @ignore */\nexport class List extends DataType {\n  constructor(child) {\n    super();\n    this.children = [child];\n  }\n  get typeId() {\n    return Type.List;\n  }\n  toString() {\n    return `List<${this.valueType}>`;\n  }\n  get valueType() {\n    return this.children[0].type;\n  }\n  get valueField() {\n    return this.children[0];\n  }\n  get ArrayType() {\n    return this.valueType.ArrayType;\n  }\n}\nList[Symbol.toStringTag] = (proto => {\n  proto.children = null;\n  return proto[Symbol.toStringTag] = 'List';\n})(List.prototype);\n/** @ignore */\nexport class Struct extends DataType {\n  constructor(children) {\n    super();\n    this.children = children;\n  }\n  get typeId() {\n    return Type.Struct;\n  }\n  toString() {\n    return `Struct<{${this.children.map(f => `${f.name}:${f.type}`).join(`, `)}}>`;\n  }\n}\nStruct[Symbol.toStringTag] = (proto => {\n  proto.children = null;\n  return proto[Symbol.toStringTag] = 'Struct';\n})(Struct.prototype);\n/** @ignore */\nclass Union_ extends DataType {\n  constructor(mode, typeIds, children) {\n    super();\n    this.mode = mode;\n    this.children = children;\n    this.typeIds = typeIds = Int32Array.from(typeIds);\n    this.typeIdToChildIndex = typeIds.reduce((typeIdToChildIndex, typeId, idx) => {\n      return (typeIdToChildIndex[typeId] = idx) && typeIdToChildIndex || typeIdToChildIndex;\n    }, Object.create(null));\n  }\n  get typeId() {\n    return Type.Union;\n  }\n  toString() {\n    return `${this[Symbol.toStringTag]}<${this.children.map(x => `${x.type}`).join(` | `)}>`;\n  }\n}\nUnion_[Symbol.toStringTag] = (proto => {\n  proto.mode = null;\n  proto.typeIds = null;\n  proto.children = null;\n  proto.typeIdToChildIndex = null;\n  proto.ArrayType = Int8Array;\n  return proto[Symbol.toStringTag] = 'Union';\n})(Union_.prototype);\nexport { Union_ as Union };\n/** @ignore */\nexport class DenseUnion extends Union_ {\n  constructor(typeIds, children) {\n    super(UnionMode.Dense, typeIds, children);\n  }\n}\n/** @ignore */\nexport class SparseUnion extends Union_ {\n  constructor(typeIds, children) {\n    super(UnionMode.Sparse, typeIds, children);\n  }\n}\n/** @ignore */\nexport class FixedSizeBinary extends DataType {\n  constructor(byteWidth) {\n    super();\n    this.byteWidth = byteWidth;\n  }\n  get typeId() {\n    return Type.FixedSizeBinary;\n  }\n  toString() {\n    return `FixedSizeBinary[${this.byteWidth}]`;\n  }\n}\nFixedSizeBinary[Symbol.toStringTag] = (proto => {\n  proto.byteWidth = null;\n  proto.ArrayType = Uint8Array;\n  return proto[Symbol.toStringTag] = 'FixedSizeBinary';\n})(FixedSizeBinary.prototype);\n/** @ignore */\nexport class FixedSizeList extends DataType {\n  constructor(listSize, child) {\n    super();\n    this.listSize = listSize;\n    this.children = [child];\n  }\n  get typeId() {\n    return Type.FixedSizeList;\n  }\n  get valueType() {\n    return this.children[0].type;\n  }\n  get valueField() {\n    return this.children[0];\n  }\n  get ArrayType() {\n    return this.valueType.ArrayType;\n  }\n  toString() {\n    return `FixedSizeList[${this.listSize}]<${this.valueType}>`;\n  }\n}\nFixedSizeList[Symbol.toStringTag] = (proto => {\n  proto.children = null;\n  proto.listSize = null;\n  return proto[Symbol.toStringTag] = 'FixedSizeList';\n})(FixedSizeList.prototype);\n/** @ignore */\nexport class Map_ extends DataType {\n  constructor(child) {\n    let keysSorted = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    super();\n    this.children = [child];\n    this.keysSorted = keysSorted;\n  }\n  get typeId() {\n    return Type.Map;\n  }\n  get keyType() {\n    return this.children[0].type.children[0].type;\n  }\n  get valueType() {\n    return this.children[0].type.children[1].type;\n  }\n  toString() {\n    return `Map<{${this.children[0].type.children.map(f => `${f.name}:${f.type}`).join(`, `)}}>`;\n  }\n}\nMap_[Symbol.toStringTag] = (proto => {\n  proto.children = null;\n  proto.keysSorted = null;\n  return proto[Symbol.toStringTag] = 'Map_';\n})(Map_.prototype);\n/** @ignore */\nconst getId = (atomicDictionaryId => () => ++atomicDictionaryId)(-1);\n/** @ignore */\nexport class Dictionary extends DataType {\n  constructor(dictionary, indices, id, isOrdered) {\n    super();\n    this.indices = indices;\n    this.dictionary = dictionary;\n    this.isOrdered = isOrdered || false;\n    this.id = id == null ? getId() : typeof id === 'number' ? id : id.low;\n  }\n  get typeId() {\n    return Type.Dictionary;\n  }\n  get children() {\n    return this.dictionary.children;\n  }\n  get valueType() {\n    return this.dictionary;\n  }\n  get ArrayType() {\n    return this.dictionary.ArrayType;\n  }\n  toString() {\n    return `Dictionary<${this.indices}, ${this.dictionary}>`;\n  }\n}\nDictionary[Symbol.toStringTag] = (proto => {\n  proto.id = null;\n  proto.indices = null;\n  proto.isOrdered = null;\n  proto.dictionary = null;\n  return proto[Symbol.toStringTag] = 'Dictionary';\n})(Dictionary.prototype);\n/** @ignore */\nexport function strideForType(type) {\n  let t = type;\n  switch (type.typeId) {\n    case Type.Decimal:\n      return 4;\n    case Type.Timestamp:\n      return 2;\n    case Type.Date:\n      return 1 + t.unit;\n    case Type.Interval:\n      return 1 + t.unit;\n    case Type.Int:\n      return 1 + +(t.bitWidth > 32);\n    case Type.Time:\n      return 1 + +(t.bitWidth > 32);\n    case Type.FixedSizeList:\n      return t.listSize;\n    case Type.FixedSizeBinary:\n      return t.byteWidth;\n    default:\n      return 1;\n  }\n}","map":{"version":3,"sources":["type.ts"],"names":[],"mappings":"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","sourcesContent":["// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\n/* tslint:disable:class-name */\n\nimport { Field } from './schema';\nimport { flatbuffers } from 'flatbuffers';\nimport { TypedArrayConstructor } from './interfaces';\nimport { VectorType as V, TypeToDataType } from './interfaces';\nimport { instance as comparer } from './visitor/typecomparator';\n\nimport Long = flatbuffers.Long;\nimport {\n    Type,\n    Precision, UnionMode,\n    DateUnit, TimeUnit, IntervalUnit\n} from './enum';\n\n/** @ignore */\nexport type TimeBitWidth = 32 | 64;\n/** @ignore */\nexport type IntBitWidth = 8 | 16 | 32 | 64;\n/** @ignore */\nexport type IsSigned = { 'true': true; 'false': false };\n/** @ignore */\nexport type RowLike<T extends { [key: string]: DataType }> =\n      ( Iterable<[string, T[keyof T]['TValue'] | null]> )\n    & { [P in keyof T]: T[P]['TValue'] | null }\n    & { get<K extends keyof T>(key: K): T[K]['TValue'] | null; }\n    & { set<K extends keyof T>(key: K, val: T[K]['TValue'] | null): void; }\n    ;\n\n/** @ignore */\nexport type MapLike<K extends DataType = any, V extends DataType = any> =\n      { [P in K['TValue']]: V['TValue'] | null }\n    & ( Map<K['TValue'], V['TValue'] | null> )\n    ;\n\nexport interface DataType<TType extends Type = Type, TChildren extends { [key: string]: DataType } = any> {\n    readonly TType: TType;\n    readonly TArray: any;\n    readonly TValue: any;\n    readonly ArrayType: any;\n    readonly children: Field<TChildren[keyof TChildren]>[];\n}\n\n/**\n * An abstract base class for classes that encapsulate metadata about each of\n * the logical types that Arrow can represent.\n */\nexport abstract class DataType<TType extends Type = Type, TChildren extends { [key: string]: DataType } = any> {\n\n    // @ts-ignore\n    public [Symbol.toStringTag]: string;\n\n    /** @nocollapse */ static            isNull (x: any): x is Null            { return x && x.typeId === Type.Null;            }\n    /** @nocollapse */ static             isInt (x: any): x is Int_            { return x && x.typeId === Type.Int;             }\n    /** @nocollapse */ static           isFloat (x: any): x is Float           { return x && x.typeId === Type.Float;           }\n    /** @nocollapse */ static          isBinary (x: any): x is Binary          { return x && x.typeId === Type.Binary;          }\n    /** @nocollapse */ static            isUtf8 (x: any): x is Utf8            { return x && x.typeId === Type.Utf8;            }\n    /** @nocollapse */ static            isBool (x: any): x is Bool            { return x && x.typeId === Type.Bool;            }\n    /** @nocollapse */ static         isDecimal (x: any): x is Decimal         { return x && x.typeId === Type.Decimal;         }\n    /** @nocollapse */ static            isDate (x: any): x is Date_           { return x && x.typeId === Type.Date;            }\n    /** @nocollapse */ static            isTime (x: any): x is Time_           { return x && x.typeId === Type.Time;            }\n    /** @nocollapse */ static       isTimestamp (x: any): x is Timestamp_      { return x && x.typeId === Type.Timestamp;       }\n    /** @nocollapse */ static        isInterval (x: any): x is Interval_       { return x && x.typeId === Type.Interval;        }\n    /** @nocollapse */ static            isList (x: any): x is List            { return x && x.typeId === Type.List;            }\n    /** @nocollapse */ static          isStruct (x: any): x is Struct          { return x && x.typeId === Type.Struct;          }\n    /** @nocollapse */ static           isUnion (x: any): x is Union_          { return x && x.typeId === Type.Union;           }\n    /** @nocollapse */ static isFixedSizeBinary (x: any): x is FixedSizeBinary { return x && x.typeId === Type.FixedSizeBinary; }\n    /** @nocollapse */ static   isFixedSizeList (x: any): x is FixedSizeList   { return x && x.typeId === Type.FixedSizeList;   }\n    /** @nocollapse */ static             isMap (x: any): x is Map_            { return x && x.typeId === Type.Map;             }\n    /** @nocollapse */ static      isDictionary (x: any): x is Dictionary      { return x && x.typeId === Type.Dictionary;      }\n\n    public get typeId(): TType { return <any> Type.NONE; }\n    public compareTo(other: DataType): other is TypeToDataType<TType> {\n        return comparer.visit(this, other);\n    }\n\n    protected static [Symbol.toStringTag] = ((proto: DataType) => {\n        (<any> proto).children = null;\n        (<any> proto).ArrayType = Array;\n        return proto[Symbol.toStringTag] = 'DataType';\n    })(DataType.prototype);\n}\n\n/** @ignore */\nexport interface Null extends DataType<Type.Null> { TArray: void; TValue: null; }\n/** @ignore */\nexport class Null extends DataType<Type.Null> {\n    public toString() { return `Null`; }\n    public get typeId() { return Type.Null as Type.Null; }\n    protected static [Symbol.toStringTag] = ((proto: Null) => {\n        return proto[Symbol.toStringTag] = 'Null';\n    })(Null.prototype);\n}\n\n/** @ignore */\ntype Ints = Type.Int | Type.Int8 | Type.Int16 | Type.Int32 | Type.Int64 | Type.Uint8 | Type.Uint16 | Type.Uint32 | Type.Uint64;\n/** @ignore */\ntype IType = {\n    [Type.Int   ]: { bitWidth: IntBitWidth; isSigned: true | false; TArray: IntArray;    TValue: number | bigint | Int32Array | Uint32Array; };\n    [Type.Int8  ]: { bitWidth:           8; isSigned: true;         TArray: Int8Array;   TValue: number; };\n    [Type.Int16 ]: { bitWidth:          16; isSigned: true;         TArray: Int16Array;  TValue: number; };\n    [Type.Int32 ]: { bitWidth:          32; isSigned: true;         TArray: Int32Array;  TValue: number; };\n    [Type.Int64 ]: { bitWidth:          64; isSigned: true;         TArray: Int32Array;  TValue: bigint | Int32Array | Uint32Array; };\n    [Type.Uint8 ]: { bitWidth:           8; isSigned: false;        TArray: Uint8Array;  TValue: number; };\n    [Type.Uint16]: { bitWidth:          16; isSigned: false;        TArray: Uint16Array; TValue: number; };\n    [Type.Uint32]: { bitWidth:          32; isSigned: false;        TArray: Uint32Array; TValue: number; };\n    [Type.Uint64]: { bitWidth:          64; isSigned: false;        TArray: Uint32Array; TValue: bigint | Int32Array | Uint32Array; };\n};\n\n/** @ignore */\ninterface Int_<T extends Ints = Ints> extends DataType<T> { TArray: IType[T]['TArray']; TValue: IType[T]['TValue']; }\n/** @ignore */\nclass Int_<T extends Ints = Ints> extends DataType<T> {\n    constructor(public readonly isSigned: IType[T]['isSigned'],\n                public readonly bitWidth: IType[T]['bitWidth']) {\n        super();\n    }\n    public get typeId() { return Type.Int as T; }\n    public get ArrayType(): TypedArrayConstructor<IType[T]['TArray']> {\n        switch (this.bitWidth) {\n            case  8: return this.isSigned ?  Int8Array :  Uint8Array;\n            case 16: return this.isSigned ? Int16Array : Uint16Array;\n            case 32: return this.isSigned ? Int32Array : Uint32Array;\n            case 64: return this.isSigned ? Int32Array : Uint32Array;\n        }\n        throw new Error(`Unrecognized ${this[Symbol.toStringTag]} type`);\n    }\n    public toString() { return `${this.isSigned ? `I` : `Ui`}nt${this.bitWidth}`; }\n    protected static [Symbol.toStringTag] = ((proto: Int_) => {\n        (<any> proto).isSigned = null;\n        (<any> proto).bitWidth = null;\n        return proto[Symbol.toStringTag] = 'Int';\n    })(Int_.prototype);\n}\n\nexport { Int_ as Int };\n\n/** @ignore */\nexport class Int8 extends Int_<Type.Int8> { constructor() { super(true, 8); } }\n/** @ignore */\nexport class Int16 extends Int_<Type.Int16> { constructor() { super(true, 16); } }\n/** @ignore */\nexport class Int32 extends Int_<Type.Int32> { constructor() { super(true, 32); } }\n/** @ignore */\nexport class Int64 extends Int_<Type.Int64> { constructor() { super(true, 64); } }\n/** @ignore */\nexport class Uint8 extends Int_<Type.Uint8> { constructor() { super(false, 8); } }\n/** @ignore */\nexport class Uint16 extends Int_<Type.Uint16> { constructor() { super(false, 16); } }\n/** @ignore */\nexport class Uint32 extends Int_<Type.Uint32> { constructor() { super(false, 32); } }\n/** @ignore */\nexport class Uint64 extends Int_<Type.Uint64> { constructor() { super(false, 64); } }\n\nObject.defineProperty(Int8.prototype, 'ArrayType', { value: Int8Array });\nObject.defineProperty(Int16.prototype, 'ArrayType', { value: Int16Array });\nObject.defineProperty(Int32.prototype, 'ArrayType', { value: Int32Array });\nObject.defineProperty(Int64.prototype, 'ArrayType', { value: Int32Array });\nObject.defineProperty(Uint8.prototype, 'ArrayType', { value: Uint8Array });\nObject.defineProperty(Uint16.prototype, 'ArrayType', { value: Uint16Array });\nObject.defineProperty(Uint32.prototype, 'ArrayType', { value: Uint32Array });\nObject.defineProperty(Uint64.prototype, 'ArrayType', { value: Uint32Array });\n\n/** @ignore */\ntype Floats = Type.Float | Type.Float16 | Type.Float32 | Type.Float64;\n/** @ignore */\ntype FType = {\n    [Type.Float  ]: { precision: Precision;        TArray: FloatArray;    TValue: number; };\n    [Type.Float16]: { precision: Precision.HALF;   TArray: Uint16Array;   TValue: number; };\n    [Type.Float32]: { precision: Precision.SINGLE; TArray: Float32Array;  TValue: number; };\n    [Type.Float64]: { precision: Precision.DOUBLE; TArray: Float64Array;  TValue: number; };\n};\n\n/** @ignore */\nexport interface Float<T extends Floats = Floats> extends DataType<T> { TArray: FType[T]['TArray']; TValue: number; }\n/** @ignore */\nexport class Float<T extends Floats = Floats> extends DataType<T> {\n    constructor(public readonly precision: Precision) {\n        super();\n    }\n    public get typeId() { return Type.Float as T; }\n    public get ArrayType(): TypedArrayConstructor<FType[T]['TArray']> {\n        switch (this.precision) {\n            case Precision.HALF: return Uint16Array;\n            case Precision.SINGLE: return Float32Array;\n            case Precision.DOUBLE: return Float64Array;\n        }\n        throw new Error(`Unrecognized ${this[Symbol.toStringTag]} type`);\n    }\n    public toString() { return `Float${(this.precision << 5) || 16}`; }\n    protected static [Symbol.toStringTag] = ((proto: Float) => {\n        (<any> proto).precision = null;\n        return proto[Symbol.toStringTag] = 'Float';\n    })(Float.prototype);\n}\n\n/** @ignore */\nexport class Float16 extends Float<Type.Float16> { constructor() { super(Precision.HALF); } }\n/** @ignore */\nexport class Float32 extends Float<Type.Float32> { constructor() { super(Precision.SINGLE); } }\n/** @ignore */\nexport class Float64 extends Float<Type.Float64> { constructor() { super(Precision.DOUBLE); } }\n\nObject.defineProperty(Float16.prototype, 'ArrayType', { value: Uint16Array });\nObject.defineProperty(Float32.prototype, 'ArrayType', { value: Float32Array });\nObject.defineProperty(Float64.prototype, 'ArrayType', { value: Float64Array });\n\n/** @ignore */\nexport interface Binary extends DataType<Type.Binary> { TArray: Uint8Array; TValue: Uint8Array; ArrayType: TypedArrayConstructor<Uint8Array>; }\n/** @ignore */\nexport class Binary extends DataType<Type.Binary> {\n    constructor() {\n        super();\n    }\n    public get typeId() { return Type.Binary as Type.Binary; }\n    public toString() { return `Binary`; }\n    protected static [Symbol.toStringTag] = ((proto: Binary) => {\n        (<any> proto).ArrayType = Uint8Array;\n        return proto[Symbol.toStringTag] = 'Binary';\n    })(Binary.prototype);\n}\n\n/** @ignore */\nexport interface Utf8 extends DataType<Type.Utf8> { TArray: Uint8Array; TValue: string; ArrayType: TypedArrayConstructor<Uint8Array>; }\n/** @ignore */\nexport class Utf8 extends DataType<Type.Utf8> {\n    constructor() {\n        super();\n    }\n    public get typeId() { return Type.Utf8 as Type.Utf8; }\n    public toString() { return `Utf8`; }\n    protected static [Symbol.toStringTag] = ((proto: Utf8) => {\n        (<any> proto).ArrayType = Uint8Array;\n        return proto[Symbol.toStringTag] = 'Utf8';\n    })(Utf8.prototype);\n}\n\n/** @ignore */\nexport interface Bool extends DataType<Type.Bool> { TArray: Uint8Array; TValue: boolean; ArrayType: TypedArrayConstructor<Uint8Array>; }\n/** @ignore */\nexport class Bool extends DataType<Type.Bool> {\n    constructor() {\n        super();\n    }\n    public get typeId() { return Type.Bool as Type.Bool; }\n    public toString() { return `Bool`; }\n    protected static [Symbol.toStringTag] = ((proto: Bool) => {\n        (<any> proto).ArrayType = Uint8Array;\n        return proto[Symbol.toStringTag] = 'Bool';\n    })(Bool.prototype);\n}\n\n/** @ignore */\nexport interface Decimal extends DataType<Type.Decimal> { TArray: Uint32Array; TValue: Uint32Array; ArrayType: TypedArrayConstructor<Uint32Array>; }\n/** @ignore */\nexport class Decimal extends DataType<Type.Decimal> {\n    constructor(public readonly scale: number,\n                public readonly precision: number) {\n        super();\n    }\n    public get typeId() { return Type.Decimal as Type.Decimal; }\n    public toString() { return `Decimal[${this.precision}e${this.scale > 0 ? `+` : ``}${this.scale}]`; }\n    protected static [Symbol.toStringTag] = ((proto: Decimal) => {\n        (<any> proto).scale = null;\n        (<any> proto).precision = null;\n        (<any> proto).ArrayType = Uint32Array;\n        return proto[Symbol.toStringTag] = 'Decimal';\n    })(Decimal.prototype);\n}\n\n/** @ignore */\nexport type Dates = Type.Date | Type.DateDay | Type.DateMillisecond;\n/** @ignore */\nexport interface Date_<T extends Dates = Dates> extends DataType<T> { TArray: Int32Array; TValue: Date; ArrayType: TypedArrayConstructor<Int32Array>; }\n/** @ignore */\nexport class Date_<T extends Dates = Dates> extends DataType<T> {\n    constructor(public readonly unit: DateUnit) {\n        super();\n    }\n    public get typeId() { return Type.Date as T; }\n    public toString() { return `Date${(this.unit + 1) * 32}<${DateUnit[this.unit]}>`; }\n    protected static [Symbol.toStringTag] = ((proto: Date_) => {\n        (<any> proto).unit = null;\n        (<any> proto).ArrayType = Int32Array;\n        return proto[Symbol.toStringTag] = 'Date';\n    })(Date_.prototype);\n}\n\n/** @ignore */\nexport class DateDay extends Date_<Type.DateDay> { constructor() { super(DateUnit.DAY); } }\n/** @ignore */\nexport class DateMillisecond extends Date_<Type.DateMillisecond> { constructor() { super(DateUnit.MILLISECOND); } }\n\n/** @ignore */\ntype Times = Type.Time | Type.TimeSecond | Type.TimeMillisecond | Type.TimeMicrosecond | Type.TimeNanosecond;\n/** @ignore */\ntype TimesType = {\n    [Type.Time           ]: { unit: TimeUnit;             TValue: number | Int32Array };\n    [Type.TimeSecond     ]: { unit: TimeUnit.SECOND;      TValue: number;             };\n    [Type.TimeMillisecond]: { unit: TimeUnit.MILLISECOND; TValue: number;             };\n    [Type.TimeMicrosecond]: { unit: TimeUnit.MICROSECOND; TValue: Int32Array;         };\n    [Type.TimeNanosecond ]: { unit: TimeUnit.NANOSECOND;  TValue: Int32Array;         };\n};\n\n/** @ignore */\ninterface Time_<T extends Times = Times> extends DataType<T> { TArray: Int32Array; TValue: TimesType[T]['TValue']; ArrayType: TypedArrayConstructor<Int32Array>; }\n/** @ignore */\nclass Time_<T extends Times = Times> extends DataType<T> {\n    constructor(public readonly unit: TimesType[T]['unit'],\n                public readonly bitWidth: TimeBitWidth) {\n        super();\n    }\n    public get typeId() { return Type.Time as T; }\n    public toString() { return `Time${this.bitWidth}<${TimeUnit[this.unit]}>`; }\n    protected static [Symbol.toStringTag] = ((proto: Time_) => {\n        (<any> proto).unit = null;\n        (<any> proto).bitWidth = null;\n        (<any> proto).ArrayType = Int32Array;\n        return proto[Symbol.toStringTag] = 'Time';\n    })(Time_.prototype);\n}\n\nexport { Time_ as Time };\n\n/** @ignore */\nexport class TimeSecond extends Time_<Type.TimeSecond> { constructor() { super(TimeUnit.SECOND, 32); } }\n/** @ignore */\nexport class TimeMillisecond extends Time_<Type.TimeMillisecond> { constructor() { super(TimeUnit.MILLISECOND, 32); } }\n/** @ignore */\nexport class TimeMicrosecond extends Time_<Type.TimeMicrosecond> { constructor() { super(TimeUnit.MICROSECOND, 64); } }\n/** @ignore */\nexport class TimeNanosecond extends Time_<Type.TimeNanosecond> { constructor() { super(TimeUnit.NANOSECOND, 64); } }\n\n/** @ignore */\ntype Timestamps = Type.Timestamp | Type.TimestampSecond | Type.TimestampMillisecond | Type.TimestampMicrosecond | Type.TimestampNanosecond;\n/** @ignore */\ninterface Timestamp_<T extends Timestamps = Timestamps> extends DataType<T> { TArray: Int32Array; TValue: number; ArrayType: TypedArrayConstructor<Int32Array>; }\n/** @ignore */\nclass Timestamp_<T extends Timestamps = Timestamps> extends DataType<T> {\n    constructor(public readonly unit: TimeUnit,\n                public readonly timezone?: string | null) {\n        super();\n    }\n    public get typeId() { return Type.Timestamp as T; }\n    public toString() { return `Timestamp<${TimeUnit[this.unit]}${this.timezone ? `, ${this.timezone}` : ``}>`; }\n    protected static [Symbol.toStringTag] = ((proto: Timestamp_) => {\n        (<any> proto).unit = null;\n        (<any> proto).timezone = null;\n        (<any> proto).ArrayType = Int32Array;\n        return proto[Symbol.toStringTag] = 'Timestamp';\n    })(Timestamp_.prototype);\n}\n\nexport { Timestamp_ as Timestamp };\n\n/** @ignore */\nexport class TimestampSecond extends Timestamp_<Type.TimestampSecond> { constructor(timezone?: string | null) { super(TimeUnit.SECOND, timezone); } }\n/** @ignore */\nexport class TimestampMillisecond extends Timestamp_<Type.TimestampMillisecond> { constructor(timezone?: string | null) { super(TimeUnit.MILLISECOND, timezone); } }\n/** @ignore */\nexport class TimestampMicrosecond extends Timestamp_<Type.TimestampMicrosecond> { constructor(timezone?: string | null) { super(TimeUnit.MICROSECOND, timezone); } }\n/** @ignore */\nexport class TimestampNanosecond extends Timestamp_<Type.TimestampNanosecond> { constructor(timezone?: string | null) { super(TimeUnit.NANOSECOND, timezone); } }\n\n/** @ignore */\ntype Intervals = Type.Interval | Type.IntervalDayTime | Type.IntervalYearMonth;\n/** @ignore */\ninterface Interval_<T extends Intervals = Intervals> extends DataType<T> { TArray: Int32Array; TValue: Int32Array; ArrayType: TypedArrayConstructor<Int32Array>; }\n/** @ignore */\nclass Interval_<T extends Intervals = Intervals> extends DataType<T> {\n    constructor(public readonly unit: IntervalUnit) {\n        super();\n    }\n    public get typeId() { return Type.Interval as T; }\n    public toString() { return `Interval<${IntervalUnit[this.unit]}>`; }\n    protected static [Symbol.toStringTag] = ((proto: Interval_) => {\n        (<any> proto).unit = null;\n        (<any> proto).ArrayType = Int32Array;\n        return proto[Symbol.toStringTag] = 'Interval';\n    })(Interval_.prototype);\n}\n\nexport { Interval_ as Interval };\n\n/** @ignore */\nexport class IntervalDayTime extends Interval_<Type.IntervalDayTime> { constructor() { super(IntervalUnit.DAY_TIME); } }\n/** @ignore */\nexport class IntervalYearMonth extends Interval_<Type.IntervalYearMonth> { constructor() { super(IntervalUnit.YEAR_MONTH); } }\n\n/** @ignore */\nexport interface List<T extends DataType = any> extends DataType<Type.List, { [0]: T }>  { TArray: IterableArrayLike<T>; TValue: V<T>; }\n/** @ignore */\nexport class List<T extends DataType = any> extends DataType<Type.List, { [0]: T }> {\n    constructor(child: Field<T>) {\n        super();\n        this.children = [child];\n    }\n    public readonly children: Field<T>[];\n    public get typeId() { return Type.List as Type.List; }\n    public toString() { return `List<${this.valueType}>`; }\n    public get valueType(): T { return this.children[0].type as T; }\n    public get valueField(): Field<T> { return this.children[0] as Field<T>; }\n    public get ArrayType(): T['ArrayType'] { return this.valueType.ArrayType; }\n    protected static [Symbol.toStringTag] = ((proto: List) => {\n        (<any> proto).children = null;\n        return proto[Symbol.toStringTag] = 'List';\n    })(List.prototype);\n}\n\n/** @ignore */\nexport interface Struct<T extends { [key: string]: DataType } = any> extends DataType<Type.Struct> { TArray: IterableArrayLike<RowLike<T>>; TValue: RowLike<T>; dataTypes: T; }\n/** @ignore */\nexport class Struct<T extends { [key: string]: DataType } = any> extends DataType<Type.Struct, T> {\n    public readonly children: Field<T[keyof T]>[];\n    constructor(children: Field<T[keyof T]>[]) {\n        super();\n        this.children = children;\n    }\n    public get typeId() { return Type.Struct as Type.Struct; }\n    public toString() { return `Struct<{${this.children.map((f) => `${f.name}:${f.type}`).join(`, `)}}>`; }\n    protected static [Symbol.toStringTag] = ((proto: Struct) => {\n        (<any> proto).children = null;\n        return proto[Symbol.toStringTag] = 'Struct';\n    })(Struct.prototype);\n}\n\n/** @ignore */\ntype Unions = Type.Union | Type.DenseUnion | Type.SparseUnion;\n/** @ignore */\ninterface Union_<T extends Unions = Unions> extends DataType<T> { TArray: Int8Array; TValue: any; ArrayType: TypedArrayConstructor<Int8Array>; }\n/** @ignore */\nclass Union_<T extends Unions = Unions> extends DataType<T> {\n    public readonly mode: UnionMode;\n    public readonly typeIds: Int32Array;\n    public readonly children: Field<any>[];\n    public readonly typeIdToChildIndex: { [key: number]: number };\n    constructor(mode: UnionMode,\n                typeIds: number[] | Int32Array,\n                children: Field<any>[]) {\n        super();\n        this.mode = mode;\n        this.children = children;\n        this.typeIds = typeIds = Int32Array.from(typeIds);\n        this.typeIdToChildIndex = typeIds.reduce((typeIdToChildIndex, typeId, idx) => {\n            return (typeIdToChildIndex[typeId] = idx) && typeIdToChildIndex || typeIdToChildIndex;\n        }, Object.create(null) as { [key: number]: number });\n    }\n    public get typeId() { return Type.Union as T; }\n    public toString() { return `${this[Symbol.toStringTag]}<${\n        this.children.map((x) => `${x.type}`).join(` | `)\n    }>`; }\n    protected static [Symbol.toStringTag] = ((proto: Union_) => {\n        (<any> proto).mode = null;\n        (<any> proto).typeIds = null;\n        (<any> proto).children = null;\n        (<any> proto).typeIdToChildIndex = null;\n        (<any> proto).ArrayType = Int8Array;\n        return proto[Symbol.toStringTag] = 'Union';\n    })(Union_.prototype);\n}\n\nexport { Union_ as Union };\n\n/** @ignore */\nexport class DenseUnion extends Union_<Type.DenseUnion> {\n    constructor(typeIds: number[] | Int32Array, children: Field[]) {\n        super(UnionMode.Dense, typeIds, children);\n    }\n}\n\n/** @ignore */\nexport class SparseUnion extends Union_<Type.SparseUnion> {\n    constructor(typeIds: number[] | Int32Array, children: Field[]) {\n        super(UnionMode.Sparse, typeIds, children);\n    }\n}\n\n/** @ignore */\nexport interface FixedSizeBinary extends DataType<Type.FixedSizeBinary> { TArray: Uint8Array; TValue: Uint8Array; ArrayType: TypedArrayConstructor<Uint8Array>; }\n/** @ignore */\nexport class FixedSizeBinary extends DataType<Type.FixedSizeBinary> {\n    constructor(public readonly byteWidth: number) {\n        super();\n    }\n    public get typeId() { return Type.FixedSizeBinary as Type.FixedSizeBinary; }\n    public toString() { return `FixedSizeBinary[${this.byteWidth}]`; }\n    protected static [Symbol.toStringTag] = ((proto: FixedSizeBinary) => {\n        (<any> proto).byteWidth = null;\n        (<any> proto).ArrayType = Uint8Array;\n        return proto[Symbol.toStringTag] = 'FixedSizeBinary';\n    })(FixedSizeBinary.prototype);\n}\n\n/** @ignore */\nexport interface FixedSizeList<T extends DataType = any> extends DataType<Type.FixedSizeList> { TArray: IterableArrayLike<T['TArray']>; TValue: V<T>; }\n/** @ignore */\nexport class FixedSizeList<T extends DataType = any> extends DataType<Type.FixedSizeList, { [0]: T }> {\n    public readonly children: Field<T>[];\n    constructor(public readonly listSize: number, child: Field<T>) {\n        super();\n        this.children = [child];\n    }\n    public get typeId() { return Type.FixedSizeList as Type.FixedSizeList; }\n    public get valueType(): T { return this.children[0].type as T; }\n    public get valueField(): Field<T> { return this.children[0] as Field<T>; }\n    public get ArrayType(): T['ArrayType'] { return this.valueType.ArrayType; }\n    public toString() { return `FixedSizeList[${this.listSize}]<${this.valueType}>`; }\n    protected static [Symbol.toStringTag] = ((proto: FixedSizeList) => {\n        (<any> proto).children = null;\n        (<any> proto).listSize = null;\n        return proto[Symbol.toStringTag] = 'FixedSizeList';\n    })(FixedSizeList.prototype);\n}\n\n/** @ignore */\nexport interface Map_<TKey extends DataType = any, TValue extends DataType = any> extends DataType<Type.Map> {\n    TArray: IterableArrayLike<Map<TKey['TValue'], TValue['TValue'] | null>>;\n    TChild: Struct<{ key: TKey, value: TValue }>;\n    TValue: MapLike<TKey, TValue>;\n}\n\n/** @ignore */\nexport class Map_<TKey extends DataType = any, TValue extends DataType = any> extends DataType<Type.Map> {\n    constructor(child: Field<Struct<{ key: TKey, value: TValue }>>, keysSorted = false) {\n        super();\n        this.children = [child];\n        this.keysSorted = keysSorted;\n    }\n    public readonly keysSorted: boolean;\n    public readonly children: Field<Struct<{ key: TKey, value: TValue }>>[];\n    public get typeId() { return Type.Map as Type.Map; }\n    public get keyType(): TKey { return this.children[0].type.children[0].type as TKey; }\n    public get valueType(): TValue { return this.children[0].type.children[1].type as TValue; }\n    public toString() { return `Map<{${this.children[0].type.children.map((f) => `${f.name}:${f.type}`).join(`, `)}}>`; }\n    protected static [Symbol.toStringTag] = ((proto: Map_) => {\n        (<any> proto).children = null;\n        (<any> proto).keysSorted = null;\n        return proto[Symbol.toStringTag] = 'Map_';\n    })(Map_.prototype);\n}\n\n/** @ignore */\nconst getId = ((atomicDictionaryId) => () => ++atomicDictionaryId)(-1);\n\n/** @ignore */\nexport type TKeys = Int8 | Int16 | Int32 | Uint8 | Uint16 | Uint32;\n\n/** @ignore */\nexport interface Dictionary<T extends DataType = any, TKey extends TKeys = TKeys> extends DataType<Type.Dictionary> { TArray: TKey['TArray']; TValue: T['TValue']; }\n/** @ignore */\nexport class Dictionary<T extends DataType = any, TKey extends TKeys = TKeys> extends DataType<Type.Dictionary> {\n    public readonly id: number;\n    public readonly indices: TKey;\n    public readonly dictionary: T;\n    public readonly isOrdered: boolean;\n    constructor(dictionary: T, indices: TKey, id?: Long | number | null, isOrdered?: boolean | null) {\n        super();\n        this.indices = indices;\n        this.dictionary = dictionary;\n        this.isOrdered = isOrdered || false;\n        this.id = id == null ? getId() : typeof id === 'number' ? id : id.low;\n    }\n    public get typeId() { return Type.Dictionary as Type.Dictionary; }\n    public get children() { return this.dictionary.children; }\n    public get valueType(): T { return this.dictionary as T; }\n    public get ArrayType(): T['ArrayType'] { return this.dictionary.ArrayType; }\n    public toString() { return `Dictionary<${this.indices}, ${this.dictionary}>`; }\n    protected static [Symbol.toStringTag] = ((proto: Dictionary) => {\n        (<any> proto).id = null;\n        (<any> proto).indices = null;\n        (<any> proto).isOrdered = null;\n        (<any> proto).dictionary = null;\n        return proto[Symbol.toStringTag] = 'Dictionary';\n    })(Dictionary.prototype);\n}\n\n/** @ignore */\nexport interface IterableArrayLike<T = any> extends ArrayLike<T>, Iterable<T> {}\n/** @ignore */\nexport type FloatArray = Uint16Array | Float32Array | Float64Array;\n/** @ignore */\nexport type IntArray = Int8Array | Int16Array | Int32Array | Uint8Array | Uint16Array | Uint32Array;\n\n/** @ignore */\nexport function strideForType(type: DataType) {\n    let t: any = type;\n    switch (type.typeId) {\n        case Type.Decimal: return 4;\n        case Type.Timestamp: return 2;\n        case Type.Date: return 1 + (t as Date_).unit;\n        case Type.Interval: return 1 + (t as Interval_).unit;\n        case Type.Int: return 1 + +((t as Int_).bitWidth > 32);\n        case Type.Time: return 1 + +((t as Time_).bitWidth > 32);\n        case Type.FixedSizeList: return (t as FixedSizeList).listSize;\n        case Type.FixedSizeBinary: return (t as FixedSizeBinary).byteWidth;\n        default: return 1;\n    }\n}\n"]},"metadata":{},"sourceType":"module"}