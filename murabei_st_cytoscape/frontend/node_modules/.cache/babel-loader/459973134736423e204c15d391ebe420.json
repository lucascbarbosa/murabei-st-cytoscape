{"ast":null,"code":"// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { Visitor } from '../visitor';\nimport { ArrowType, Precision, DateUnit, TimeUnit, IntervalUnit, UnionMode } from '../enum';\n/** @ignore */\nexport class JSONTypeAssembler extends Visitor {\n  visit(node) {\n    return node == null ? undefined : super.visit(node);\n  }\n  visitNull({\n    typeId\n  }) {\n    return {\n      'name': ArrowType[typeId].toLowerCase()\n    };\n  }\n  visitInt({\n    typeId,\n    bitWidth,\n    isSigned\n  }) {\n    return {\n      'name': ArrowType[typeId].toLowerCase(),\n      'bitWidth': bitWidth,\n      'isSigned': isSigned\n    };\n  }\n  visitFloat({\n    typeId,\n    precision\n  }) {\n    return {\n      'name': ArrowType[typeId].toLowerCase(),\n      'precision': Precision[precision]\n    };\n  }\n  visitBinary({\n    typeId\n  }) {\n    return {\n      'name': ArrowType[typeId].toLowerCase()\n    };\n  }\n  visitBool({\n    typeId\n  }) {\n    return {\n      'name': ArrowType[typeId].toLowerCase()\n    };\n  }\n  visitUtf8({\n    typeId\n  }) {\n    return {\n      'name': ArrowType[typeId].toLowerCase()\n    };\n  }\n  visitDecimal({\n    typeId,\n    scale,\n    precision\n  }) {\n    return {\n      'name': ArrowType[typeId].toLowerCase(),\n      'scale': scale,\n      'precision': precision\n    };\n  }\n  visitDate({\n    typeId,\n    unit\n  }) {\n    return {\n      'name': ArrowType[typeId].toLowerCase(),\n      'unit': DateUnit[unit]\n    };\n  }\n  visitTime({\n    typeId,\n    unit,\n    bitWidth\n  }) {\n    return {\n      'name': ArrowType[typeId].toLowerCase(),\n      'unit': TimeUnit[unit],\n      bitWidth\n    };\n  }\n  visitTimestamp({\n    typeId,\n    timezone,\n    unit\n  }) {\n    return {\n      'name': ArrowType[typeId].toLowerCase(),\n      'unit': TimeUnit[unit],\n      timezone\n    };\n  }\n  visitInterval({\n    typeId,\n    unit\n  }) {\n    return {\n      'name': ArrowType[typeId].toLowerCase(),\n      'unit': IntervalUnit[unit]\n    };\n  }\n  visitList({\n    typeId\n  }) {\n    return {\n      'name': ArrowType[typeId].toLowerCase()\n    };\n  }\n  visitStruct({\n    typeId\n  }) {\n    return {\n      'name': ArrowType[typeId].toLowerCase()\n    };\n  }\n  visitUnion({\n    typeId,\n    mode,\n    typeIds\n  }) {\n    return {\n      'name': ArrowType[typeId].toLowerCase(),\n      'mode': UnionMode[mode],\n      'typeIds': [...typeIds]\n    };\n  }\n  visitDictionary(node) {\n    return this.visit(node.dictionary);\n  }\n  visitFixedSizeBinary({\n    typeId,\n    byteWidth\n  }) {\n    return {\n      'name': ArrowType[typeId].toLowerCase(),\n      'byteWidth': byteWidth\n    };\n  }\n  visitFixedSizeList({\n    typeId,\n    listSize\n  }) {\n    return {\n      'name': ArrowType[typeId].toLowerCase(),\n      'listSize': listSize\n    };\n  }\n  visitMap({\n    typeId,\n    keysSorted\n  }) {\n    return {\n      'name': ArrowType[typeId].toLowerCase(),\n      'keysSorted': keysSorted\n    };\n  }\n}","map":{"version":3,"sources":["visitor/jsontypeassembler.ts"],"names":[],"mappings":"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","sourcesContent":["// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport * as type from '../type';\nimport { Visitor } from '../visitor';\nimport { ArrowType, Precision, DateUnit, TimeUnit, IntervalUnit, UnionMode } from '../enum';\n\n/** @ignore */\nexport interface JSONTypeAssembler extends Visitor {\n    visit<T extends type.DataType>(node: T): object | undefined;\n}\n\n/** @ignore */\nexport class JSONTypeAssembler extends Visitor {\n    public visit<T extends type.DataType>(node: T): object | undefined {\n        return node == null ? undefined : super.visit(node);\n    }\n    public visitNull<T extends type.Null>({ typeId }: T) {\n        return { 'name': ArrowType[typeId].toLowerCase() };\n    }\n    public visitInt<T extends type.Int>({ typeId, bitWidth, isSigned }: T) {\n        return { 'name': ArrowType[typeId].toLowerCase(), 'bitWidth': bitWidth, 'isSigned': isSigned };\n    }\n    public visitFloat<T extends type.Float>({ typeId, precision }: T) {\n        return { 'name': ArrowType[typeId].toLowerCase(), 'precision': Precision[precision] };\n    }\n    public visitBinary<T extends type.Binary>({ typeId }: T) {\n        return { 'name': ArrowType[typeId].toLowerCase() };\n    }\n    public visitBool<T extends type.Bool>({ typeId }: T) {\n        return { 'name': ArrowType[typeId].toLowerCase() };\n    }\n    public visitUtf8<T extends type.Utf8>({ typeId }: T) {\n        return { 'name': ArrowType[typeId].toLowerCase() };\n    }\n    public visitDecimal<T extends type.Decimal>({ typeId, scale, precision }: T) {\n        return { 'name': ArrowType[typeId].toLowerCase(), 'scale': scale, 'precision': precision };\n    }\n    public visitDate<T extends type.Date_>({ typeId, unit }: T) {\n        return { 'name': ArrowType[typeId].toLowerCase(), 'unit': DateUnit[unit] };\n    }\n    public visitTime<T extends type.Time>({ typeId, unit, bitWidth }: T) {\n        return { 'name': ArrowType[typeId].toLowerCase(), 'unit': TimeUnit[unit], bitWidth };\n    }\n    public visitTimestamp<T extends type.Timestamp>({ typeId, timezone, unit }: T) {\n        return { 'name': ArrowType[typeId].toLowerCase(), 'unit': TimeUnit[unit], timezone };\n    }\n    public visitInterval<T extends type.Interval>({ typeId, unit }: T) {\n        return { 'name': ArrowType[typeId].toLowerCase(), 'unit': IntervalUnit[unit] };\n    }\n    public visitList<T extends type.List>({ typeId }: T) {\n        return { 'name': ArrowType[typeId].toLowerCase() };\n    }\n    public visitStruct<T extends type.Struct>({ typeId }: T) {\n        return { 'name': ArrowType[typeId].toLowerCase() };\n    }\n    public visitUnion<T extends type.Union>({ typeId, mode, typeIds }: T) {\n        return {\n            'name': ArrowType[typeId].toLowerCase(),\n            'mode': UnionMode[mode],\n            'typeIds': [...typeIds]\n        };\n    }\n    public visitDictionary<T extends type.Dictionary>(node: T) {\n        return this.visit(node.dictionary);\n    }\n    public visitFixedSizeBinary<T extends type.FixedSizeBinary>({ typeId, byteWidth }: T) {\n        return { 'name': ArrowType[typeId].toLowerCase(), 'byteWidth': byteWidth };\n    }\n    public visitFixedSizeList<T extends type.FixedSizeList>({ typeId, listSize }: T) {\n        return { 'name': ArrowType[typeId].toLowerCase(), 'listSize': listSize };\n    }\n    public visitMap<T extends type.Map_>({ typeId, keysSorted }: T) {\n        return { 'name': ArrowType[typeId].toLowerCase(), 'keysSorted': keysSorted };\n    }\n}\n"]},"metadata":{},"sourceType":"module"}