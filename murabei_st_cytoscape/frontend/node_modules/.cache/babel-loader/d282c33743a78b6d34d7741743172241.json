{"ast":null,"code":"// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { Vector } from '../vector';\nimport { MessageHeader } from '../enum';\nimport { Footer } from './metadata/file';\nimport streamAdapters from '../io/adapters';\nimport { ByteStream, AsyncByteStream } from '../io/stream';\nimport { RandomAccessFile, AsyncRandomAccessFile } from '../io/file';\nimport { VectorLoader, JSONVectorLoader } from '../visitor/vectorloader';\nimport { RecordBatch, _InternalEmptyPlaceholderRecordBatch } from '../recordbatch';\nimport { ITERATOR_DONE, ReadableInterop } from '../io/interfaces';\nimport { MessageReader, AsyncMessageReader, JSONMessageReader, checkForMagicArrowString, magicLength, magicAndPadding, magicX2AndPadding } from './message';\nimport { isPromise, isIterable, isAsyncIterable, isIteratorResult, isArrowJSON, isFileHandle, isFetchResponse, isReadableDOMStream, isReadableNodeStream } from '../util/compat';\nexport class RecordBatchReader extends ReadableInterop {\n  constructor(impl) {\n    super();\n    this._impl = impl;\n  }\n  get closed() {\n    return this._impl.closed;\n  }\n  get schema() {\n    return this._impl.schema;\n  }\n  get autoDestroy() {\n    return this._impl.autoDestroy;\n  }\n  get dictionaries() {\n    return this._impl.dictionaries;\n  }\n  get numDictionaries() {\n    return this._impl.numDictionaries;\n  }\n  get numRecordBatches() {\n    return this._impl.numRecordBatches;\n  }\n  get footer() {\n    return this._impl.isFile() ? this._impl.footer : null;\n  }\n  isSync() {\n    return this._impl.isSync();\n  }\n  isAsync() {\n    return this._impl.isAsync();\n  }\n  isFile() {\n    return this._impl.isFile();\n  }\n  isStream() {\n    return this._impl.isStream();\n  }\n  next() {\n    return this._impl.next();\n  }\n  throw(value) {\n    return this._impl.throw(value);\n  }\n  return(value) {\n    return this._impl.return(value);\n  }\n  cancel() {\n    return this._impl.cancel();\n  }\n  reset(schema) {\n    this._impl.reset(schema);\n    this._DOMStream = undefined;\n    this._nodeStream = undefined;\n    return this;\n  }\n  open(options) {\n    const opening = this._impl.open(options);\n    return isPromise(opening) ? opening.then(() => this) : this;\n  }\n  readRecordBatch(index) {\n    return this._impl.isFile() ? this._impl.readRecordBatch(index) : null;\n  }\n  [Symbol.iterator]() {\n    return this._impl[Symbol.iterator]();\n  }\n  [Symbol.asyncIterator]() {\n    return this._impl[Symbol.asyncIterator]();\n  }\n  toDOMStream() {\n    return streamAdapters.toDOMStream(this.isSync() ? {\n      [Symbol.iterator]: () => this\n    } : {\n      [Symbol.asyncIterator]: () => this\n    });\n  }\n  toNodeStream() {\n    return streamAdapters.toNodeStream(this.isSync() ? {\n      [Symbol.iterator]: () => this\n    } : {\n      [Symbol.asyncIterator]: () => this\n    }, {\n      objectMode: true\n    });\n  }\n  /** @nocollapse */\n  // @ts-ignore\n  static throughNode(options) {\n    throw new Error(`\"throughNode\" not available in this environment`);\n  }\n  /** @nocollapse */\n  static throughDOM(\n  // @ts-ignore\n  writableStrategy,\n  // @ts-ignore\n  readableStrategy) {\n    throw new Error(`\"throughDOM\" not available in this environment`);\n  }\n  /** @nocollapse */\n  static from(source) {\n    if (source instanceof RecordBatchReader) {\n      return source;\n    } else if (isArrowJSON(source)) {\n      return fromArrowJSON(source);\n    } else if (isFileHandle(source)) {\n      return fromFileHandle(source);\n    } else if (isPromise(source)) {\n      return (async () => await RecordBatchReader.from(await source))();\n    } else if (isFetchResponse(source) || isReadableDOMStream(source) || isReadableNodeStream(source) || isAsyncIterable(source)) {\n      return fromAsyncByteStream(new AsyncByteStream(source));\n    }\n    return fromByteStream(new ByteStream(source));\n  }\n  /** @nocollapse */\n  static readAll(source) {\n    if (source instanceof RecordBatchReader) {\n      return source.isSync() ? readAllSync(source) : readAllAsync(source);\n    } else if (isArrowJSON(source) || ArrayBuffer.isView(source) || isIterable(source) || isIteratorResult(source)) {\n      return readAllSync(source);\n    }\n    return readAllAsync(source);\n  }\n}\n//\n// Since TS is a structural type system, we define the following subclass stubs\n// so that concrete types exist to associate with with the interfaces below.\n//\n// The implementation for each RecordBatchReader is hidden away in the set of\n// `RecordBatchReaderImpl` classes in the second half of this file. This allows\n// us to export a single RecordBatchReader class, and swap out the impl based\n// on the io primitives or underlying arrow (JSON, file, or stream) at runtime.\n//\n// Async/await makes our job a bit harder, since it forces everything to be\n// either fully sync or fully async. This is why the logic for the reader impls\n// has been duplicated into both sync and async variants. Since the RBR\n// delegates to its impl, an RBR with an AsyncRecordBatchFileReaderImpl for\n// example will return async/await-friendly Promises, but one with a (sync)\n// RecordBatchStreamReaderImpl will always return values. Nothing should be\n// different about their logic, aside from the async handling. This is also why\n// this code looks highly structured, as it should be nearly identical and easy\n// to follow.\n//\n/** @ignore */\nexport class RecordBatchStreamReader extends RecordBatchReader {\n  constructor(_impl) {\n    super(_impl);\n    this._impl = _impl;\n  }\n  [Symbol.iterator]() {\n    return this._impl[Symbol.iterator]();\n  }\n  async *[Symbol.asyncIterator]() {\n    yield* this[Symbol.iterator]();\n  }\n}\n/** @ignore */\nexport class AsyncRecordBatchStreamReader extends RecordBatchReader {\n  constructor(_impl) {\n    super(_impl);\n    this._impl = _impl;\n  }\n  [Symbol.iterator]() {\n    throw new Error(`AsyncRecordBatchStreamReader is not Iterable`);\n  }\n  [Symbol.asyncIterator]() {\n    return this._impl[Symbol.asyncIterator]();\n  }\n}\n/** @ignore */\nexport class RecordBatchFileReader extends RecordBatchStreamReader {\n  constructor(_impl) {\n    super(_impl);\n    this._impl = _impl;\n  }\n}\n/** @ignore */\nexport class AsyncRecordBatchFileReader extends AsyncRecordBatchStreamReader {\n  constructor(_impl) {\n    super(_impl);\n    this._impl = _impl;\n  }\n}\n/** @ignore */\nclass RecordBatchReaderImpl {\n  constructor(dictionaries = new Map()) {\n    this.closed = false;\n    this.autoDestroy = true;\n    this._dictionaryIndex = 0;\n    this._recordBatchIndex = 0;\n    this.dictionaries = dictionaries;\n  }\n  get numDictionaries() {\n    return this._dictionaryIndex;\n  }\n  get numRecordBatches() {\n    return this._recordBatchIndex;\n  }\n  isSync() {\n    return false;\n  }\n  isAsync() {\n    return false;\n  }\n  isFile() {\n    return false;\n  }\n  isStream() {\n    return false;\n  }\n  reset(schema) {\n    this._dictionaryIndex = 0;\n    this._recordBatchIndex = 0;\n    this.schema = schema;\n    this.dictionaries = new Map();\n    return this;\n  }\n  _loadRecordBatch(header, body) {\n    return new RecordBatch(this.schema, header.length, this._loadVectors(header, body, this.schema.fields));\n  }\n  _loadDictionaryBatch(header, body) {\n    const {\n      id,\n      isDelta,\n      data\n    } = header;\n    const {\n      dictionaries,\n      schema\n    } = this;\n    const dictionary = dictionaries.get(id);\n    if (isDelta || !dictionary) {\n      const type = schema.dictionaries.get(id);\n      return dictionary && isDelta ? dictionary.concat(Vector.new(this._loadVectors(data, body, [type])[0])) : Vector.new(this._loadVectors(data, body, [type])[0]);\n    }\n    return dictionary;\n  }\n  _loadVectors(header, body, types) {\n    return new VectorLoader(body, header.nodes, header.buffers, this.dictionaries).visitMany(types);\n  }\n}\n/** @ignore */\nclass RecordBatchStreamReaderImpl extends RecordBatchReaderImpl {\n  constructor(source, dictionaries) {\n    super(dictionaries);\n    this._reader = !isArrowJSON(source) ? new MessageReader(this._handle = source) : new JSONMessageReader(this._handle = source);\n  }\n  isSync() {\n    return true;\n  }\n  isStream() {\n    return true;\n  }\n  [Symbol.iterator]() {\n    return this;\n  }\n  cancel() {\n    if (!this.closed && (this.closed = true)) {\n      this.reset()._reader.return();\n      this._reader = null;\n      this.dictionaries = null;\n    }\n  }\n  open(options) {\n    if (!this.closed) {\n      this.autoDestroy = shouldAutoDestroy(this, options);\n      if (!(this.schema || (this.schema = this._reader.readSchema()))) {\n        this.cancel();\n      }\n    }\n    return this;\n  }\n  throw(value) {\n    if (!this.closed && this.autoDestroy && (this.closed = true)) {\n      return this.reset()._reader.throw(value);\n    }\n    return ITERATOR_DONE;\n  }\n  return(value) {\n    if (!this.closed && this.autoDestroy && (this.closed = true)) {\n      return this.reset()._reader.return(value);\n    }\n    return ITERATOR_DONE;\n  }\n  next() {\n    if (this.closed) {\n      return ITERATOR_DONE;\n    }\n    let message,\n      {\n        _reader: reader\n      } = this;\n    while (message = this._readNextMessageAndValidate()) {\n      if (message.isSchema()) {\n        this.reset(message.header());\n      } else if (message.isRecordBatch()) {\n        this._recordBatchIndex++;\n        const header = message.header();\n        const buffer = reader.readMessageBody(message.bodyLength);\n        const recordBatch = this._loadRecordBatch(header, buffer);\n        return {\n          done: false,\n          value: recordBatch\n        };\n      } else if (message.isDictionaryBatch()) {\n        this._dictionaryIndex++;\n        const header = message.header();\n        const buffer = reader.readMessageBody(message.bodyLength);\n        const vector = this._loadDictionaryBatch(header, buffer);\n        this.dictionaries.set(header.id, vector);\n      }\n    }\n    if (this.schema && this._recordBatchIndex === 0) {\n      this._recordBatchIndex++;\n      return {\n        done: false,\n        value: new _InternalEmptyPlaceholderRecordBatch(this.schema)\n      };\n    }\n    return this.return();\n  }\n  _readNextMessageAndValidate(type) {\n    return this._reader.readMessage(type);\n  }\n}\n/** @ignore */\nclass AsyncRecordBatchStreamReaderImpl extends RecordBatchReaderImpl {\n  constructor(source, dictionaries) {\n    super(dictionaries);\n    this._reader = new AsyncMessageReader(this._handle = source);\n  }\n  isAsync() {\n    return true;\n  }\n  isStream() {\n    return true;\n  }\n  [Symbol.asyncIterator]() {\n    return this;\n  }\n  async cancel() {\n    if (!this.closed && (this.closed = true)) {\n      await this.reset()._reader.return();\n      this._reader = null;\n      this.dictionaries = null;\n    }\n  }\n  async open(options) {\n    if (!this.closed) {\n      this.autoDestroy = shouldAutoDestroy(this, options);\n      if (!(this.schema || (this.schema = await this._reader.readSchema()))) {\n        await this.cancel();\n      }\n    }\n    return this;\n  }\n  async throw(value) {\n    if (!this.closed && this.autoDestroy && (this.closed = true)) {\n      return await this.reset()._reader.throw(value);\n    }\n    return ITERATOR_DONE;\n  }\n  async return(value) {\n    if (!this.closed && this.autoDestroy && (this.closed = true)) {\n      return await this.reset()._reader.return(value);\n    }\n    return ITERATOR_DONE;\n  }\n  async next() {\n    if (this.closed) {\n      return ITERATOR_DONE;\n    }\n    let message,\n      {\n        _reader: reader\n      } = this;\n    while (message = await this._readNextMessageAndValidate()) {\n      if (message.isSchema()) {\n        await this.reset(message.header());\n      } else if (message.isRecordBatch()) {\n        this._recordBatchIndex++;\n        const header = message.header();\n        const buffer = await reader.readMessageBody(message.bodyLength);\n        const recordBatch = this._loadRecordBatch(header, buffer);\n        return {\n          done: false,\n          value: recordBatch\n        };\n      } else if (message.isDictionaryBatch()) {\n        this._dictionaryIndex++;\n        const header = message.header();\n        const buffer = await reader.readMessageBody(message.bodyLength);\n        const vector = this._loadDictionaryBatch(header, buffer);\n        this.dictionaries.set(header.id, vector);\n      }\n    }\n    if (this.schema && this._recordBatchIndex === 0) {\n      this._recordBatchIndex++;\n      return {\n        done: false,\n        value: new _InternalEmptyPlaceholderRecordBatch(this.schema)\n      };\n    }\n    return await this.return();\n  }\n  async _readNextMessageAndValidate(type) {\n    return await this._reader.readMessage(type);\n  }\n}\n/** @ignore */\nclass RecordBatchFileReaderImpl extends RecordBatchStreamReaderImpl {\n  constructor(source, dictionaries) {\n    super(source instanceof RandomAccessFile ? source : new RandomAccessFile(source), dictionaries);\n  }\n  get footer() {\n    return this._footer;\n  }\n  get numDictionaries() {\n    return this._footer ? this._footer.numDictionaries : 0;\n  }\n  get numRecordBatches() {\n    return this._footer ? this._footer.numRecordBatches : 0;\n  }\n  isSync() {\n    return true;\n  }\n  isFile() {\n    return true;\n  }\n  open(options) {\n    if (!this.closed && !this._footer) {\n      this.schema = (this._footer = this._readFooter()).schema;\n      for (const block of this._footer.dictionaryBatches()) {\n        block && this._readDictionaryBatch(this._dictionaryIndex++);\n      }\n    }\n    return super.open(options);\n  }\n  readRecordBatch(index) {\n    if (this.closed) {\n      return null;\n    }\n    if (!this._footer) {\n      this.open();\n    }\n    const block = this._footer && this._footer.getRecordBatch(index);\n    if (block && this._handle.seek(block.offset)) {\n      const message = this._reader.readMessage(MessageHeader.RecordBatch);\n      if (message && message.isRecordBatch()) {\n        const header = message.header();\n        const buffer = this._reader.readMessageBody(message.bodyLength);\n        const recordBatch = this._loadRecordBatch(header, buffer);\n        return recordBatch;\n      }\n    }\n    return null;\n  }\n  _readDictionaryBatch(index) {\n    const block = this._footer && this._footer.getDictionaryBatch(index);\n    if (block && this._handle.seek(block.offset)) {\n      const message = this._reader.readMessage(MessageHeader.DictionaryBatch);\n      if (message && message.isDictionaryBatch()) {\n        const header = message.header();\n        const buffer = this._reader.readMessageBody(message.bodyLength);\n        const vector = this._loadDictionaryBatch(header, buffer);\n        this.dictionaries.set(header.id, vector);\n      }\n    }\n  }\n  _readFooter() {\n    const {\n      _handle\n    } = this;\n    const offset = _handle.size - magicAndPadding;\n    const length = _handle.readInt32(offset);\n    const buffer = _handle.readAt(offset - length, length);\n    return Footer.decode(buffer);\n  }\n  _readNextMessageAndValidate(type) {\n    if (!this._footer) {\n      this.open();\n    }\n    if (this._footer && this._recordBatchIndex < this.numRecordBatches) {\n      const block = this._footer && this._footer.getRecordBatch(this._recordBatchIndex);\n      if (block && this._handle.seek(block.offset)) {\n        return this._reader.readMessage(type);\n      }\n    }\n    return null;\n  }\n}\n/** @ignore */\nclass AsyncRecordBatchFileReaderImpl extends AsyncRecordBatchStreamReaderImpl {\n  constructor(source, ...rest) {\n    const byteLength = typeof rest[0] !== 'number' ? rest.shift() : undefined;\n    const dictionaries = rest[0] instanceof Map ? rest.shift() : undefined;\n    super(source instanceof AsyncRandomAccessFile ? source : new AsyncRandomAccessFile(source, byteLength), dictionaries);\n  }\n  get footer() {\n    return this._footer;\n  }\n  get numDictionaries() {\n    return this._footer ? this._footer.numDictionaries : 0;\n  }\n  get numRecordBatches() {\n    return this._footer ? this._footer.numRecordBatches : 0;\n  }\n  isFile() {\n    return true;\n  }\n  isAsync() {\n    return true;\n  }\n  async open(options) {\n    if (!this.closed && !this._footer) {\n      this.schema = (this._footer = await this._readFooter()).schema;\n      for (const block of this._footer.dictionaryBatches()) {\n        block && (await this._readDictionaryBatch(this._dictionaryIndex++));\n      }\n    }\n    return await super.open(options);\n  }\n  async readRecordBatch(index) {\n    if (this.closed) {\n      return null;\n    }\n    if (!this._footer) {\n      await this.open();\n    }\n    const block = this._footer && this._footer.getRecordBatch(index);\n    if (block && (await this._handle.seek(block.offset))) {\n      const message = await this._reader.readMessage(MessageHeader.RecordBatch);\n      if (message && message.isRecordBatch()) {\n        const header = message.header();\n        const buffer = await this._reader.readMessageBody(message.bodyLength);\n        const recordBatch = this._loadRecordBatch(header, buffer);\n        return recordBatch;\n      }\n    }\n    return null;\n  }\n  async _readDictionaryBatch(index) {\n    const block = this._footer && this._footer.getDictionaryBatch(index);\n    if (block && (await this._handle.seek(block.offset))) {\n      const message = await this._reader.readMessage(MessageHeader.DictionaryBatch);\n      if (message && message.isDictionaryBatch()) {\n        const header = message.header();\n        const buffer = await this._reader.readMessageBody(message.bodyLength);\n        const vector = this._loadDictionaryBatch(header, buffer);\n        this.dictionaries.set(header.id, vector);\n      }\n    }\n  }\n  async _readFooter() {\n    const {\n      _handle\n    } = this;\n    _handle._pending && (await _handle._pending);\n    const offset = _handle.size - magicAndPadding;\n    const length = await _handle.readInt32(offset);\n    const buffer = await _handle.readAt(offset - length, length);\n    return Footer.decode(buffer);\n  }\n  async _readNextMessageAndValidate(type) {\n    if (!this._footer) {\n      await this.open();\n    }\n    if (this._footer && this._recordBatchIndex < this.numRecordBatches) {\n      const block = this._footer.getRecordBatch(this._recordBatchIndex);\n      if (block && (await this._handle.seek(block.offset))) {\n        return await this._reader.readMessage(type);\n      }\n    }\n    return null;\n  }\n}\n/** @ignore */\nclass RecordBatchJSONReaderImpl extends RecordBatchStreamReaderImpl {\n  constructor(source, dictionaries) {\n    super(source, dictionaries);\n  }\n  _loadVectors(header, body, types) {\n    return new JSONVectorLoader(body, header.nodes, header.buffers, this.dictionaries).visitMany(types);\n  }\n}\n//\n// Define some helper functions and static implementations down here. There's\n// a bit of branching in the static methods that can lead to the same routines\n// being executed, so we've broken those out here for readability.\n//\n/** @ignore */\nfunction shouldAutoDestroy(self, options) {\n  return options && typeof options['autoDestroy'] === 'boolean' ? options['autoDestroy'] : self['autoDestroy'];\n}\n/** @ignore */\nfunction* readAllSync(source) {\n  const reader = RecordBatchReader.from(source);\n  try {\n    if (!reader.open({\n      autoDestroy: false\n    }).closed) {\n      do {\n        yield reader;\n      } while (!reader.reset().open().closed);\n    }\n  } finally {\n    reader.cancel();\n  }\n}\n/** @ignore */\nasync function* readAllAsync(source) {\n  const reader = await RecordBatchReader.from(source);\n  try {\n    if (!(await reader.open({\n      autoDestroy: false\n    })).closed) {\n      do {\n        yield reader;\n      } while (!(await reader.reset().open()).closed);\n    }\n  } finally {\n    await reader.cancel();\n  }\n}\n/** @ignore */\nfunction fromArrowJSON(source) {\n  return new RecordBatchStreamReader(new RecordBatchJSONReaderImpl(source));\n}\n/** @ignore */\nfunction fromByteStream(source) {\n  const bytes = source.peek(magicLength + 7 & ~7);\n  return bytes && bytes.byteLength >= 4 ? !checkForMagicArrowString(bytes) ? new RecordBatchStreamReader(new RecordBatchStreamReaderImpl(source)) : new RecordBatchFileReader(new RecordBatchFileReaderImpl(source.read())) : new RecordBatchStreamReader(new RecordBatchStreamReaderImpl(function* () {}()));\n}\n/** @ignore */\nasync function fromAsyncByteStream(source) {\n  const bytes = await source.peek(magicLength + 7 & ~7);\n  return bytes && bytes.byteLength >= 4 ? !checkForMagicArrowString(bytes) ? new AsyncRecordBatchStreamReader(new AsyncRecordBatchStreamReaderImpl(source)) : new RecordBatchFileReader(new RecordBatchFileReaderImpl(await source.read())) : new AsyncRecordBatchStreamReader(new AsyncRecordBatchStreamReaderImpl(async function* () {}()));\n}\n/** @ignore */\nasync function fromFileHandle(source) {\n  const {\n    size\n  } = await source.stat();\n  const file = new AsyncRandomAccessFile(source, size);\n  if (size >= magicX2AndPadding) {\n    if (checkForMagicArrowString(await file.readAt(0, magicLength + 7 & ~7))) {\n      return new AsyncRecordBatchFileReader(new AsyncRecordBatchFileReaderImpl(file));\n    }\n  }\n  return new AsyncRecordBatchStreamReader(new AsyncRecordBatchStreamReaderImpl(file));\n}","map":{"version":3,"sources":["ipc/reader.ts"],"names":[],"mappings":"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","sourcesContent":["// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Vector } from '../vector';\nimport { DataType } from '../type';\nimport { MessageHeader } from '../enum';\nimport { Footer } from './metadata/file';\nimport { Schema, Field } from '../schema';\nimport streamAdapters from '../io/adapters';\nimport { Message } from './metadata/message';\nimport * as metadata from './metadata/message';\nimport { ArrayBufferViewInput } from '../util/buffer';\nimport { ByteStream, AsyncByteStream } from '../io/stream';\nimport { RandomAccessFile, AsyncRandomAccessFile } from '../io/file';\nimport { VectorLoader, JSONVectorLoader } from '../visitor/vectorloader';\nimport { RecordBatch, _InternalEmptyPlaceholderRecordBatch } from '../recordbatch';\nimport {\n    FileHandle,\n    ArrowJSONLike,\n    ITERATOR_DONE,\n    ReadableInterop,\n} from '../io/interfaces';\nimport {\n    MessageReader, AsyncMessageReader, JSONMessageReader,\n    checkForMagicArrowString, magicLength, magicAndPadding, magicX2AndPadding\n} from './message';\nimport {\n    isPromise,\n    isIterable, isAsyncIterable,\n    isIteratorResult, isArrowJSON,\n    isFileHandle, isFetchResponse,\n    isReadableDOMStream, isReadableNodeStream\n} from '../util/compat';\n\n/** @ignore */ export type FromArg0 = ArrowJSONLike;\n/** @ignore */ export type FromArg1 = PromiseLike<ArrowJSONLike>;\n/** @ignore */ export type FromArg2 = Iterable<ArrayBufferViewInput> | ArrayBufferViewInput;\n/** @ignore */ export type FromArg3 = PromiseLike<Iterable<ArrayBufferViewInput> | ArrayBufferViewInput>;\n/** @ignore */ export type FromArg4 = Response | NodeJS.ReadableStream | ReadableStream<ArrayBufferViewInput> | AsyncIterable<ArrayBufferViewInput>;\n/** @ignore */ export type FromArg5 = FileHandle | PromiseLike<FileHandle> | PromiseLike<FromArg4>;\n/** @ignore */ export type FromArgs = FromArg0 | FromArg1 | FromArg2 | FromArg3 | FromArg4 | FromArg5;\n\n/** @ignore */ type OpenOptions = { autoDestroy?: boolean; };\n/** @ignore */ type RecordBatchReaders<T extends { [key: string]: DataType } = any> = RecordBatchFileReader<T> | RecordBatchStreamReader<T>;\n/** @ignore */ type AsyncRecordBatchReaders<T extends { [key: string]: DataType } = any> = AsyncRecordBatchFileReader<T> | AsyncRecordBatchStreamReader<T>;\n/** @ignore */ type RecordBatchFileReaders<T extends { [key: string]: DataType } = any> = RecordBatchFileReader<T> | AsyncRecordBatchFileReader<T>;\n/** @ignore */ type RecordBatchStreamReaders<T extends { [key: string]: DataType } = any> = RecordBatchStreamReader<T> | AsyncRecordBatchStreamReader<T>;\n\nexport class RecordBatchReader<T extends { [key: string]: DataType } = any> extends ReadableInterop<RecordBatch<T>> {\n\n    protected _impl: RecordBatchReaderImpls<T>;\n    protected constructor(impl: RecordBatchReaderImpls<T>) {\n        super();\n        this._impl = impl;\n    }\n\n    public get closed() { return this._impl.closed; }\n    public get schema() { return this._impl.schema; }\n    public get autoDestroy() { return this._impl.autoDestroy; }\n    public get dictionaries() { return this._impl.dictionaries; }\n    public get numDictionaries() { return this._impl.numDictionaries; }\n    public get numRecordBatches() { return this._impl.numRecordBatches; }\n    public get footer() { return this._impl.isFile() ? this._impl.footer : null; }\n\n    public isSync(): this is RecordBatchReaders<T> { return this._impl.isSync(); }\n    public isAsync(): this is AsyncRecordBatchReaders<T> { return this._impl.isAsync(); }\n    public isFile(): this is RecordBatchFileReaders<T> { return this._impl.isFile(); }\n    public isStream(): this is RecordBatchStreamReaders<T> { return this._impl.isStream(); }\n\n    public next() {\n        return this._impl.next();\n    }\n    public throw(value?: any) {\n        return this._impl.throw(value);\n    }\n    public return(value?: any) {\n        return this._impl.return(value);\n    }\n    public cancel() {\n        return this._impl.cancel();\n    }\n    public reset(schema?: Schema<T> | null): this {\n        this._impl.reset(schema);\n        this._DOMStream = undefined;\n        this._nodeStream = undefined;\n        return this;\n    }\n    public open(options?: OpenOptions) {\n        const opening = this._impl.open(options);\n        return isPromise(opening) ? opening.then(() => this) : this;\n    }\n    public readRecordBatch(index: number): RecordBatch<T> | null | Promise<RecordBatch<T> | null> {\n        return this._impl.isFile() ? this._impl.readRecordBatch(index) : null;\n    }\n    public [Symbol.iterator](): IterableIterator<RecordBatch<T>> {\n        return (<IterableIterator<RecordBatch<T>>> this._impl)[Symbol.iterator]();\n    }\n    public [Symbol.asyncIterator](): AsyncIterableIterator<RecordBatch<T>> {\n        return (<AsyncIterableIterator<RecordBatch<T>>> this._impl)[Symbol.asyncIterator]();\n    }\n    public toDOMStream() {\n        return streamAdapters.toDOMStream<RecordBatch<T>>(\n            (this.isSync()\n                ? { [Symbol.iterator]: () => this } as Iterable<RecordBatch<T>>\n                : { [Symbol.asyncIterator]: () => this } as AsyncIterable<RecordBatch<T>>));\n    }\n    public toNodeStream() {\n        return streamAdapters.toNodeStream<RecordBatch<T>>(\n            (this.isSync()\n                ? { [Symbol.iterator]: () => this } as Iterable<RecordBatch<T>>\n                : { [Symbol.asyncIterator]: () => this } as AsyncIterable<RecordBatch<T>>),\n            { objectMode: true });\n    }\n\n    /** @nocollapse */\n    // @ts-ignore\n    public static throughNode(options?: import('stream').DuplexOptions & { autoDestroy: boolean }): import('stream').Duplex {\n        throw new Error(`\"throughNode\" not available in this environment`);\n    }\n    /** @nocollapse */\n    public static throughDOM<T extends { [key: string]: DataType }>(\n        // @ts-ignore\n        writableStrategy?: ByteLengthQueuingStrategy,\n        // @ts-ignore\n        readableStrategy?: { autoDestroy: boolean }\n    ): { writable: WritableStream<Uint8Array>, readable: ReadableStream<RecordBatch<T>> } {\n        throw new Error(`\"throughDOM\" not available in this environment`);\n    }\n\n    public static from<T extends RecordBatchReader>(source: T): T;\n    public static from<T extends { [key: string]: DataType } = any>(source: FromArg0): RecordBatchStreamReader<T>;\n    public static from<T extends { [key: string]: DataType } = any>(source: FromArg1): Promise<RecordBatchStreamReader<T>>;\n    public static from<T extends { [key: string]: DataType } = any>(source: FromArg2): RecordBatchFileReader<T> | RecordBatchStreamReader<T>;\n    public static from<T extends { [key: string]: DataType } = any>(source: FromArg3): Promise<RecordBatchFileReader<T> | RecordBatchStreamReader<T>>;\n    public static from<T extends { [key: string]: DataType } = any>(source: FromArg4): Promise<RecordBatchFileReader<T> | AsyncRecordBatchReaders<T>>;\n    public static from<T extends { [key: string]: DataType } = any>(source: FromArg5): Promise<AsyncRecordBatchFileReader<T> | AsyncRecordBatchStreamReader<T>>;\n    /** @nocollapse */\n    public static from<T extends { [key: string]: DataType } = any>(source: any) {\n        if (source instanceof RecordBatchReader) {\n            return source;\n        } else if (isArrowJSON(source)) {\n            return fromArrowJSON<T>(source);\n        } else if (isFileHandle(source)) {\n            return fromFileHandle<T>(source);\n        } else if (isPromise<any>(source)) {\n            return (async () => await RecordBatchReader.from<any>(await source))();\n        } else if (isFetchResponse(source) || isReadableDOMStream(source) || isReadableNodeStream(source) || isAsyncIterable(source)) {\n            return fromAsyncByteStream<T>(new AsyncByteStream(source));\n        }\n        return fromByteStream<T>(new ByteStream(source));\n    }\n\n    public static readAll<T extends RecordBatchReader>(source: T): T extends RecordBatchReaders ? IterableIterator<T> : AsyncIterableIterator<T>;\n    public static readAll<T extends { [key: string]: DataType } = any>(source: FromArg0): IterableIterator<RecordBatchStreamReader<T>>;\n    public static readAll<T extends { [key: string]: DataType } = any>(source: FromArg1): AsyncIterableIterator<RecordBatchStreamReader<T>>;\n    public static readAll<T extends { [key: string]: DataType } = any>(source: FromArg2): IterableIterator<RecordBatchFileReader<T> | RecordBatchStreamReader<T>>;\n    public static readAll<T extends { [key: string]: DataType } = any>(source: FromArg3): AsyncIterableIterator<RecordBatchFileReader<T> | RecordBatchStreamReader<T>>;\n    public static readAll<T extends { [key: string]: DataType } = any>(source: FromArg4): AsyncIterableIterator<RecordBatchFileReader<T> | AsyncRecordBatchReaders<T>>;\n    public static readAll<T extends { [key: string]: DataType } = any>(source: FromArg5): AsyncIterableIterator<AsyncRecordBatchFileReader<T> | AsyncRecordBatchStreamReader<T>>;\n    /** @nocollapse */\n    public static readAll<T extends { [key: string]: DataType } = any>(source: any) {\n        if (source instanceof RecordBatchReader) {\n            return source.isSync() ? readAllSync(source) : readAllAsync(source as AsyncRecordBatchReaders<T>);\n        } else if (isArrowJSON(source) || ArrayBuffer.isView(source) || isIterable<ArrayBufferViewInput>(source) || isIteratorResult(source)) {\n            return readAllSync<T>(source) as IterableIterator<RecordBatchReaders<T>>;\n        }\n        return readAllAsync<T>(source) as AsyncIterableIterator<RecordBatchReaders<T> | AsyncRecordBatchReaders<T>>;\n    }\n}\n\n//\n// Since TS is a structural type system, we define the following subclass stubs\n// so that concrete types exist to associate with with the interfaces below.\n//\n// The implementation for each RecordBatchReader is hidden away in the set of\n// `RecordBatchReaderImpl` classes in the second half of this file. This allows\n// us to export a single RecordBatchReader class, and swap out the impl based\n// on the io primitives or underlying arrow (JSON, file, or stream) at runtime.\n//\n// Async/await makes our job a bit harder, since it forces everything to be\n// either fully sync or fully async. This is why the logic for the reader impls\n// has been duplicated into both sync and async variants. Since the RBR\n// delegates to its impl, an RBR with an AsyncRecordBatchFileReaderImpl for\n// example will return async/await-friendly Promises, but one with a (sync)\n// RecordBatchStreamReaderImpl will always return values. Nothing should be\n// different about their logic, aside from the async handling. This is also why\n// this code looks highly structured, as it should be nearly identical and easy\n// to follow.\n//\n\n/** @ignore */\nexport class RecordBatchStreamReader<T extends { [key: string]: DataType } = any> extends RecordBatchReader<T> {\n    constructor(protected _impl: RecordBatchStreamReaderImpl<T>) { super (_impl); }\n    public [Symbol.iterator]() { return (this._impl as IterableIterator<RecordBatch<T>>)[Symbol.iterator](); }\n    public async *[Symbol.asyncIterator](): AsyncIterableIterator<RecordBatch<T>> { yield* this[Symbol.iterator](); }\n}\n/** @ignore */\nexport class AsyncRecordBatchStreamReader<T extends { [key: string]: DataType } = any> extends RecordBatchReader<T> {\n    constructor(protected _impl: AsyncRecordBatchStreamReaderImpl<T>) { super (_impl); }\n    public [Symbol.iterator](): IterableIterator<RecordBatch<T>> { throw new Error(`AsyncRecordBatchStreamReader is not Iterable`); }\n    public [Symbol.asyncIterator]() { return (this._impl as AsyncIterableIterator<RecordBatch<T>>)[Symbol.asyncIterator](); }\n}\n/** @ignore */\nexport class RecordBatchFileReader<T extends { [key: string]: DataType } = any> extends RecordBatchStreamReader<T> {\n    constructor(protected _impl: RecordBatchFileReaderImpl<T>) { super (_impl); }\n}\n/** @ignore */\nexport class AsyncRecordBatchFileReader<T extends { [key: string]: DataType } = any> extends AsyncRecordBatchStreamReader<T> {\n    constructor(protected _impl: AsyncRecordBatchFileReaderImpl<T>) { super (_impl); }\n}\n\n//\n// Now override the return types for each sync/async RecordBatchReader variant\n//\n\n/** @ignore */\nexport interface RecordBatchStreamReader<T extends { [key: string]: DataType } = any> extends RecordBatchReader<T> {\n    open(options?: OpenOptions | undefined): this;\n    cancel(): void;\n    throw(value?: any): IteratorResult<any>;\n    return(value?: any): IteratorResult<any>;\n    next(value?: any): IteratorResult<RecordBatch<T>>;\n}\n\n/** @ignore */\nexport interface AsyncRecordBatchStreamReader<T extends { [key: string]: DataType } = any> extends RecordBatchReader<T> {\n    open(options?: OpenOptions | undefined): Promise<this>;\n    cancel(): Promise<void>;\n    throw(value?: any): Promise<IteratorResult<any>>;\n    return(value?: any): Promise<IteratorResult<any>>;\n    next(value?: any): Promise<IteratorResult<RecordBatch<T>>>;\n}\n\n/** @ignore */\nexport interface RecordBatchFileReader<T extends { [key: string]: DataType } = any> extends RecordBatchStreamReader<T> {\n    footer: Footer;\n    readRecordBatch(index: number): RecordBatch<T> | null;\n}\n\n/** @ignore */\nexport interface AsyncRecordBatchFileReader<T extends { [key: string]: DataType } = any> extends AsyncRecordBatchStreamReader<T> {\n    footer: Footer;\n    readRecordBatch(index: number): Promise<RecordBatch<T> | null>;\n}\n\n/** @ignore */\ntype RecordBatchReaderImpls<T extends { [key: string]: DataType } = any> =\n     RecordBatchJSONReaderImpl<T> |\n     RecordBatchFileReaderImpl<T> |\n     RecordBatchStreamReaderImpl<T> |\n     AsyncRecordBatchFileReaderImpl<T> |\n     AsyncRecordBatchStreamReaderImpl<T>;\n\n/** @ignore */\ninterface RecordBatchReaderImpl<T extends { [key: string]: DataType } = any> {\n\n    closed: boolean;\n    schema: Schema<T>;\n    autoDestroy: boolean;\n    dictionaries: Map<number, Vector>;\n\n    isFile(): this is RecordBatchFileReaders<T>;\n    isStream(): this is RecordBatchStreamReaders<T>;\n    isSync(): this is RecordBatchReaders<T>;\n    isAsync(): this is AsyncRecordBatchReaders<T>;\n\n    reset(schema?: Schema<T> | null): this;\n}\n\n/** @ignore */\ninterface RecordBatchStreamReaderImpl<T extends { [key: string]: DataType } = any> extends RecordBatchReaderImpl<T> {\n\n    open(options?: OpenOptions): this;\n    cancel(): void;\n\n    throw(value?: any): IteratorResult<any>;\n    return(value?: any): IteratorResult<any>;\n    next(value?: any): IteratorResult<RecordBatch<T>>;\n\n    [Symbol.iterator](): IterableIterator<RecordBatch<T>>;\n}\n\n/** @ignore */\ninterface AsyncRecordBatchStreamReaderImpl<T extends { [key: string]: DataType } = any> extends RecordBatchReaderImpl<T> {\n\n    open(options?: OpenOptions): Promise<this>;\n    cancel(): Promise<void>;\n\n    throw(value?: any): Promise<IteratorResult<any>>;\n    return(value?: any): Promise<IteratorResult<any>>;\n    next(value?: any): Promise<IteratorResult<RecordBatch<T>>>;\n\n    [Symbol.asyncIterator](): AsyncIterableIterator<RecordBatch<T>>;\n}\n\n/** @ignore */\ninterface RecordBatchFileReaderImpl<T extends { [key: string]: DataType } = any> extends RecordBatchStreamReaderImpl<T> {\n    readRecordBatch(index: number): RecordBatch<T> | null;\n}\n\n/** @ignore */\ninterface AsyncRecordBatchFileReaderImpl<T extends { [key: string]: DataType } = any> extends AsyncRecordBatchStreamReaderImpl<T> {\n    readRecordBatch(index: number): Promise<RecordBatch<T> | null>;\n}\n\n/** @ignore */\nabstract class RecordBatchReaderImpl<T extends { [key: string]: DataType } = any> implements RecordBatchReaderImpl<T> {\n\n    // @ts-ignore\n    public schema: Schema;\n    public closed = false;\n    public autoDestroy = true;\n    public dictionaries: Map<number, Vector>;\n\n    protected _dictionaryIndex = 0;\n    protected _recordBatchIndex = 0;\n    public get numDictionaries() { return this._dictionaryIndex; }\n    public get numRecordBatches() { return this._recordBatchIndex; }\n\n    constructor(dictionaries = new Map<number, Vector>()) {\n        this.dictionaries = dictionaries;\n    }\n\n    public isSync(): this is RecordBatchReaders<T> { return false; }\n    public isAsync(): this is AsyncRecordBatchReaders<T> { return false; }\n    public isFile(): this is RecordBatchFileReaders<T> { return false; }\n    public isStream(): this is RecordBatchStreamReaders<T> { return false; }\n\n    public reset(schema?: Schema<T> | null) {\n        this._dictionaryIndex = 0;\n        this._recordBatchIndex = 0;\n        this.schema = <any> schema;\n        this.dictionaries = new Map();\n        return this;\n    }\n\n    protected _loadRecordBatch(header: metadata.RecordBatch, body: any) {\n        return new RecordBatch<T>(this.schema, header.length, this._loadVectors(header, body, this.schema.fields));\n    }\n    protected _loadDictionaryBatch(header: metadata.DictionaryBatch, body: any) {\n        const { id, isDelta, data } = header;\n        const { dictionaries, schema } = this;\n        const dictionary = dictionaries.get(id);\n        if (isDelta || !dictionary) {\n            const type = schema.dictionaries.get(id)!;\n            return (dictionary && isDelta ? dictionary.concat(\n                Vector.new(this._loadVectors(data, body, [type])[0])) :\n                Vector.new(this._loadVectors(data, body, [type])[0])) as Vector;\n        }\n        return dictionary;\n    }\n    protected _loadVectors(header: metadata.RecordBatch, body: any, types: (Field | DataType)[]) {\n        return new VectorLoader(body, header.nodes, header.buffers, this.dictionaries).visitMany(types);\n    }\n}\n\n/** @ignore */\nclass RecordBatchStreamReaderImpl<T extends { [key: string]: DataType } = any> extends RecordBatchReaderImpl<T> implements IterableIterator<RecordBatch<T>> {\n\n    protected _reader: MessageReader;\n    protected _handle: ByteStream | ArrowJSONLike;\n\n    constructor(source: ByteStream | ArrowJSONLike, dictionaries?: Map<number, Vector>) {\n        super(dictionaries);\n        this._reader = !isArrowJSON(source)\n            ? new MessageReader(this._handle = source)\n            : new JSONMessageReader(this._handle = source);\n    }\n\n    public isSync(): this is RecordBatchReaders<T> { return true; }\n    public isStream(): this is RecordBatchStreamReaders<T> { return true; }\n    public [Symbol.iterator](): IterableIterator<RecordBatch<T>> {\n        return this as IterableIterator<RecordBatch<T>>;\n    }\n    public cancel() {\n        if (!this.closed && (this.closed = true)) {\n            this.reset()._reader.return();\n            this._reader = <any> null;\n            this.dictionaries = <any> null;\n        }\n    }\n    public open(options?: OpenOptions) {\n        if (!this.closed) {\n            this.autoDestroy = shouldAutoDestroy(this, options);\n            if (!(this.schema || (this.schema = this._reader.readSchema()!))) {\n                this.cancel();\n            }\n        }\n        return this;\n    }\n    public throw(value?: any): IteratorResult<any> {\n        if (!this.closed && this.autoDestroy && (this.closed = true)) {\n            return this.reset()._reader.throw(value);\n        }\n        return ITERATOR_DONE;\n    }\n    public return(value?: any): IteratorResult<any> {\n        if (!this.closed && this.autoDestroy && (this.closed = true)) {\n            return this.reset()._reader.return(value);\n        }\n        return ITERATOR_DONE;\n    }\n    public next(): IteratorResult<RecordBatch<T>> {\n        if (this.closed) { return ITERATOR_DONE; }\n        let message: Message | null, { _reader: reader } = this;\n        while (message = this._readNextMessageAndValidate()) {\n            if (message.isSchema()) {\n                this.reset(message.header());\n            } else if (message.isRecordBatch()) {\n                this._recordBatchIndex++;\n                const header = message.header();\n                const buffer = reader.readMessageBody(message.bodyLength);\n                const recordBatch = this._loadRecordBatch(header, buffer);\n                return { done: false, value: recordBatch };\n            } else if (message.isDictionaryBatch()) {\n                this._dictionaryIndex++;\n                const header = message.header();\n                const buffer = reader.readMessageBody(message.bodyLength);\n                const vector = this._loadDictionaryBatch(header, buffer);\n                this.dictionaries.set(header.id, vector);\n            }\n        }\n        if (this.schema && this._recordBatchIndex === 0) {\n            this._recordBatchIndex++;\n            return { done: false, value: new _InternalEmptyPlaceholderRecordBatch<T>(this.schema) };\n        }\n        return this.return();\n    }\n    protected _readNextMessageAndValidate<T extends MessageHeader>(type?: T | null) {\n        return this._reader.readMessage<T>(type);\n    }\n}\n\n/** @ignore */\nclass AsyncRecordBatchStreamReaderImpl<T extends { [key: string]: DataType } = any> extends RecordBatchReaderImpl<T> implements AsyncIterableIterator<RecordBatch<T>> {\n\n    protected _handle: AsyncByteStream;\n    protected _reader: AsyncMessageReader;\n\n    constructor(source: AsyncByteStream, dictionaries?: Map<number, Vector>) {\n        super(dictionaries);\n        this._reader = new AsyncMessageReader(this._handle = source);\n    }\n    public isAsync(): this is AsyncRecordBatchReaders<T> { return true; }\n    public isStream(): this is RecordBatchStreamReaders<T> { return true; }\n    public [Symbol.asyncIterator](): AsyncIterableIterator<RecordBatch<T>> {\n        return this as AsyncIterableIterator<RecordBatch<T>>;\n    }\n    public async cancel() {\n        if (!this.closed && (this.closed = true)) {\n            await this.reset()._reader.return();\n            this._reader = <any> null;\n            this.dictionaries = <any> null;\n        }\n    }\n    public async open(options?: OpenOptions) {\n        if (!this.closed) {\n            this.autoDestroy = shouldAutoDestroy(this, options);\n            if (!(this.schema || (this.schema = (await this._reader.readSchema())!))) {\n                await this.cancel();\n            }\n        }\n        return this;\n    }\n    public async throw(value?: any): Promise<IteratorResult<any>> {\n        if (!this.closed && this.autoDestroy && (this.closed = true)) {\n            return await this.reset()._reader.throw(value);\n        }\n        return ITERATOR_DONE;\n    }\n    public async return(value?: any): Promise<IteratorResult<any>> {\n        if (!this.closed && this.autoDestroy && (this.closed = true)) {\n            return await this.reset()._reader.return(value);\n        }\n        return ITERATOR_DONE;\n    }\n    public async next() {\n        if (this.closed) { return ITERATOR_DONE; }\n        let message: Message | null, { _reader: reader } = this;\n        while (message = await this._readNextMessageAndValidate()) {\n            if (message.isSchema()) {\n                await this.reset(message.header());\n            } else if (message.isRecordBatch()) {\n                this._recordBatchIndex++;\n                const header = message.header();\n                const buffer = await reader.readMessageBody(message.bodyLength);\n                const recordBatch = this._loadRecordBatch(header, buffer);\n                return { done: false, value: recordBatch };\n            } else if (message.isDictionaryBatch()) {\n                this._dictionaryIndex++;\n                const header = message.header();\n                const buffer = await reader.readMessageBody(message.bodyLength);\n                const vector = this._loadDictionaryBatch(header, buffer);\n                this.dictionaries.set(header.id, vector);\n            }\n        }\n        if (this.schema && this._recordBatchIndex === 0) {\n            this._recordBatchIndex++;\n            return { done: false, value: new _InternalEmptyPlaceholderRecordBatch<T>(this.schema) };\n        }\n        return await this.return();\n    }\n    protected async _readNextMessageAndValidate<T extends MessageHeader>(type?: T | null) {\n        return await this._reader.readMessage<T>(type);\n    }\n}\n\n/** @ignore */\nclass RecordBatchFileReaderImpl<T extends { [key: string]: DataType } = any> extends RecordBatchStreamReaderImpl<T> {\n\n    // @ts-ignore\n    protected _footer?: Footer;\n    // @ts-ignore\n    protected _handle: RandomAccessFile;\n    public get footer() { return this._footer!; }\n    public get numDictionaries() { return this._footer ? this._footer.numDictionaries : 0; }\n    public get numRecordBatches() { return this._footer ? this._footer.numRecordBatches : 0; }\n\n    constructor(source: RandomAccessFile | ArrayBufferViewInput, dictionaries?: Map<number, Vector>) {\n        super(source instanceof RandomAccessFile ? source : new RandomAccessFile(source), dictionaries);\n    }\n    public isSync(): this is RecordBatchReaders<T> { return true; }\n    public isFile(): this is RecordBatchFileReaders<T> { return true; }\n    public open(options?: OpenOptions) {\n        if (!this.closed && !this._footer) {\n            this.schema = (this._footer = this._readFooter()).schema;\n            for (const block of this._footer.dictionaryBatches()) {\n                block && this._readDictionaryBatch(this._dictionaryIndex++);\n            }\n        }\n        return super.open(options);\n    }\n    public readRecordBatch(index: number) {\n        if (this.closed) { return null; }\n        if (!this._footer) { this.open(); }\n        const block = this._footer && this._footer.getRecordBatch(index);\n        if (block && this._handle.seek(block.offset)) {\n            const message = this._reader.readMessage(MessageHeader.RecordBatch);\n            if (message && message.isRecordBatch()) {\n                const header = message.header();\n                const buffer = this._reader.readMessageBody(message.bodyLength);\n                const recordBatch = this._loadRecordBatch(header, buffer);\n                return recordBatch;\n            }\n        }\n        return null;\n    }\n    protected _readDictionaryBatch(index: number) {\n        const block = this._footer && this._footer.getDictionaryBatch(index);\n        if (block && this._handle.seek(block.offset)) {\n            const message = this._reader.readMessage(MessageHeader.DictionaryBatch);\n            if (message && message.isDictionaryBatch()) {\n                const header = message.header();\n                const buffer = this._reader.readMessageBody(message.bodyLength);\n                const vector = this._loadDictionaryBatch(header, buffer);\n                this.dictionaries.set(header.id, vector);\n            }\n        }\n    }\n    protected _readFooter() {\n        const { _handle } = this;\n        const offset = _handle.size - magicAndPadding;\n        const length = _handle.readInt32(offset);\n        const buffer = _handle.readAt(offset - length, length);\n        return Footer.decode(buffer);\n    }\n    protected _readNextMessageAndValidate<T extends MessageHeader>(type?: T | null): Message<T> | null {\n        if (!this._footer) { this.open(); }\n        if (this._footer && this._recordBatchIndex < this.numRecordBatches) {\n            const block = this._footer && this._footer.getRecordBatch(this._recordBatchIndex);\n            if (block && this._handle.seek(block.offset)) {\n                return this._reader.readMessage(type);\n            }\n        }\n        return null;\n    }\n}\n\n/** @ignore */\nclass AsyncRecordBatchFileReaderImpl<T extends { [key: string]: DataType } = any> extends AsyncRecordBatchStreamReaderImpl<T>\n    implements AsyncRecordBatchFileReaderImpl<T> {\n\n    protected _footer?: Footer;\n    // @ts-ignore\n    protected _handle: AsyncRandomAccessFile;\n    public get footer() { return this._footer!; }\n    public get numDictionaries() { return this._footer ? this._footer.numDictionaries : 0; }\n    public get numRecordBatches() { return this._footer ? this._footer.numRecordBatches : 0; }\n\n    constructor(source: FileHandle, byteLength?: number, dictionaries?: Map<number, Vector>);\n    constructor(source: FileHandle | AsyncRandomAccessFile, dictionaries?: Map<number, Vector>);\n    constructor(source: FileHandle | AsyncRandomAccessFile, ...rest: any[]) {\n        const byteLength = typeof rest[0] !== 'number' ? <number> rest.shift() : undefined;\n        const dictionaries = rest[0] instanceof Map ? <Map<number, Vector>> rest.shift() : undefined;\n        super(source instanceof AsyncRandomAccessFile ? source : new AsyncRandomAccessFile(source, byteLength), dictionaries);\n    }\n    public isFile(): this is RecordBatchFileReaders<T> { return true; }\n    public isAsync(): this is AsyncRecordBatchReaders<T> { return true; }\n    public async open(options?: OpenOptions) {\n        if (!this.closed && !this._footer) {\n            this.schema = (this._footer = await this._readFooter()).schema;\n            for (const block of this._footer.dictionaryBatches()) {\n                block && await this._readDictionaryBatch(this._dictionaryIndex++);\n            }\n        }\n        return await super.open(options);\n    }\n    public async readRecordBatch(index: number) {\n        if (this.closed) { return null; }\n        if (!this._footer) { await this.open(); }\n        const block = this._footer && this._footer.getRecordBatch(index);\n        if (block && (await this._handle.seek(block.offset))) {\n            const message = await this._reader.readMessage(MessageHeader.RecordBatch);\n            if (message && message.isRecordBatch()) {\n                const header = message.header();\n                const buffer = await this._reader.readMessageBody(message.bodyLength);\n                const recordBatch = this._loadRecordBatch(header, buffer);\n                return recordBatch;\n            }\n        }\n        return null;\n    }\n    protected async _readDictionaryBatch(index: number) {\n        const block = this._footer && this._footer.getDictionaryBatch(index);\n        if (block && (await this._handle.seek(block.offset))) {\n            const message = await this._reader.readMessage(MessageHeader.DictionaryBatch);\n            if (message && message.isDictionaryBatch()) {\n                const header = message.header();\n                const buffer = await this._reader.readMessageBody(message.bodyLength);\n                const vector = this._loadDictionaryBatch(header, buffer);\n                this.dictionaries.set(header.id, vector);\n            }\n        }\n    }\n    protected async _readFooter() {\n        const { _handle } = this;\n        _handle._pending && await _handle._pending;\n        const offset = _handle.size - magicAndPadding;\n        const length = await _handle.readInt32(offset);\n        const buffer = await _handle.readAt(offset - length, length);\n        return Footer.decode(buffer);\n    }\n    protected async _readNextMessageAndValidate<T extends MessageHeader>(type?: T | null): Promise<Message<T> | null> {\n        if (!this._footer) { await this.open(); }\n        if (this._footer && this._recordBatchIndex < this.numRecordBatches) {\n            const block = this._footer.getRecordBatch(this._recordBatchIndex);\n            if (block && await this._handle.seek(block.offset)) {\n                return await this._reader.readMessage(type);\n            }\n        }\n        return null;\n    }\n}\n\n/** @ignore */\nclass RecordBatchJSONReaderImpl<T extends { [key: string]: DataType } = any> extends RecordBatchStreamReaderImpl<T> {\n    constructor(source: ArrowJSONLike, dictionaries?: Map<number, Vector>) {\n        super(source, dictionaries);\n    }\n    protected _loadVectors(header: metadata.RecordBatch, body: any, types: (Field | DataType)[]) {\n        return new JSONVectorLoader(body, header.nodes, header.buffers, this.dictionaries).visitMany(types);\n    }\n}\n\n//\n// Define some helper functions and static implementations down here. There's\n// a bit of branching in the static methods that can lead to the same routines\n// being executed, so we've broken those out here for readability.\n//\n\n/** @ignore */\nfunction shouldAutoDestroy(self: { autoDestroy: boolean }, options?: OpenOptions) {\n    return options && (typeof options['autoDestroy'] === 'boolean') ? options['autoDestroy'] : self['autoDestroy'];\n}\n\n/** @ignore */\nfunction* readAllSync<T extends { [key: string]: DataType } = any>(source: RecordBatchReaders<T> | FromArg0 | FromArg2) {\n    const reader = RecordBatchReader.from<T>(<any> source) as RecordBatchReaders<T>;\n    try {\n        if (!reader.open({ autoDestroy: false }).closed) {\n            do { yield reader; } while (!(reader.reset().open()).closed);\n        }\n    } finally { reader.cancel(); }\n}\n\n/** @ignore */\nasync function* readAllAsync<T extends { [key: string]: DataType } = any>(source: AsyncRecordBatchReaders<T> | FromArg1 | FromArg3 | FromArg4 | FromArg5) {\n    const reader = await RecordBatchReader.from<T>(<any> source) as RecordBatchReader<T>;\n    try {\n        if (!(await reader.open({ autoDestroy: false })).closed) {\n            do { yield reader; } while (!(await reader.reset().open()).closed);\n        }\n    } finally { await reader.cancel(); }\n}\n\n/** @ignore */\nfunction fromArrowJSON<T extends { [key: string]: DataType }>(source: ArrowJSONLike) {\n    return new RecordBatchStreamReader(new RecordBatchJSONReaderImpl<T>(source));\n}\n\n/** @ignore */\nfunction fromByteStream<T extends { [key: string]: DataType }>(source: ByteStream) {\n    const bytes = source.peek((magicLength + 7) & ~7);\n    return bytes && bytes.byteLength >= 4 ? !checkForMagicArrowString(bytes)\n        ? new RecordBatchStreamReader(new RecordBatchStreamReaderImpl<T>(source))\n        : new RecordBatchFileReader(new RecordBatchFileReaderImpl<T>(source.read()))\n        : new RecordBatchStreamReader(new RecordBatchStreamReaderImpl<T>(function*(): any {}()));\n}\n\n/** @ignore */\nasync function fromAsyncByteStream<T extends { [key: string]: DataType }>(source: AsyncByteStream) {\n    const bytes = await source.peek((magicLength + 7) & ~7);\n    return bytes && bytes.byteLength >= 4 ? !checkForMagicArrowString(bytes)\n        ? new AsyncRecordBatchStreamReader(new AsyncRecordBatchStreamReaderImpl<T>(source))\n        : new RecordBatchFileReader(new RecordBatchFileReaderImpl<T>(await source.read()))\n        : new AsyncRecordBatchStreamReader(new AsyncRecordBatchStreamReaderImpl<T>(async function*(): any {}()));\n}\n\n/** @ignore */\nasync function fromFileHandle<T extends { [key: string]: DataType }>(source: FileHandle) {\n    const { size } = await source.stat();\n    const file = new AsyncRandomAccessFile(source, size);\n    if (size >= magicX2AndPadding) {\n        if (checkForMagicArrowString(await file.readAt(0, (magicLength + 7) & ~7))) {\n            return new AsyncRecordBatchFileReader(new AsyncRecordBatchFileReaderImpl<T>(file));\n        }\n    }\n    return new AsyncRecordBatchStreamReader(new AsyncRecordBatchStreamReaderImpl<T>(file));\n}\n"]},"metadata":{},"sourceType":"module"}