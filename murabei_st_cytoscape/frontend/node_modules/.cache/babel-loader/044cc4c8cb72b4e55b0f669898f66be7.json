{"ast":null,"code":"// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { flatbuffers } from 'flatbuffers';\nimport * as Schema_ from '../../fb/Schema';\nimport * as Message_ from '../../fb/Message';\nimport { Schema, Field } from '../../schema';\nimport { toUint8Array } from '../../util/buffer';\nimport { MessageHeader, MetadataVersion } from '../../enum';\nimport { instance as typeAssembler } from '../../visitor/typeassembler';\nimport { fieldFromJSON, schemaFromJSON, recordBatchFromJSON, dictionaryBatchFromJSON } from './json';\nvar Long = flatbuffers.Long;\nvar Builder = flatbuffers.Builder;\nvar ByteBuffer = flatbuffers.ByteBuffer;\nvar Type = Schema_.org.apache.arrow.flatbuf.Type;\nvar _Field = Schema_.org.apache.arrow.flatbuf.Field;\nvar _Schema = Schema_.org.apache.arrow.flatbuf.Schema;\nvar _Buffer = Schema_.org.apache.arrow.flatbuf.Buffer;\nvar _Message = Message_.org.apache.arrow.flatbuf.Message;\nvar _KeyValue = Schema_.org.apache.arrow.flatbuf.KeyValue;\nvar _FieldNode = Message_.org.apache.arrow.flatbuf.FieldNode;\nvar _Endianness = Schema_.org.apache.arrow.flatbuf.Endianness;\nvar _RecordBatch = Message_.org.apache.arrow.flatbuf.RecordBatch;\nvar _DictionaryBatch = Message_.org.apache.arrow.flatbuf.DictionaryBatch;\nimport { DataType, Dictionary, Utf8, Binary, Decimal, FixedSizeBinary, List, FixedSizeList, Map_, Struct, Union, Bool, Null, Int, Float, Date_, Time, Interval, Timestamp, Int32 } from '../../type';\n/**\n * @ignore\n * @private\n **/\nexport class Message {\n  constructor(bodyLength, version, headerType, header) {\n    this._version = version;\n    this._headerType = headerType;\n    this.body = new Uint8Array(0);\n    header && (this._createHeader = () => header);\n    this._bodyLength = typeof bodyLength === 'number' ? bodyLength : bodyLength.low;\n  }\n  /** @nocollapse */\n  static fromJSON(msg, headerType) {\n    const message = new Message(0, MetadataVersion.V4, headerType);\n    message._createHeader = messageHeaderFromJSON(msg, headerType);\n    return message;\n  }\n  /** @nocollapse */\n  static decode(buf) {\n    buf = new ByteBuffer(toUint8Array(buf));\n    const _message = _Message.getRootAsMessage(buf);\n    const bodyLength = _message.bodyLength();\n    const version = _message.version();\n    const headerType = _message.headerType();\n    const message = new Message(bodyLength, version, headerType);\n    message._createHeader = decodeMessageHeader(_message, headerType);\n    return message;\n  }\n  /** @nocollapse */\n  static encode(message) {\n    let b = new Builder(),\n      headerOffset = -1;\n    if (message.isSchema()) {\n      headerOffset = Schema.encode(b, message.header());\n    } else if (message.isRecordBatch()) {\n      headerOffset = RecordBatch.encode(b, message.header());\n    } else if (message.isDictionaryBatch()) {\n      headerOffset = DictionaryBatch.encode(b, message.header());\n    }\n    _Message.startMessage(b);\n    _Message.addVersion(b, MetadataVersion.V4);\n    _Message.addHeader(b, headerOffset);\n    _Message.addHeaderType(b, message.headerType);\n    _Message.addBodyLength(b, new Long(message.bodyLength, 0));\n    _Message.finishMessageBuffer(b, _Message.endMessage(b));\n    return b.asUint8Array();\n  }\n  /** @nocollapse */\n  static from(header, bodyLength = 0) {\n    if (header instanceof Schema) {\n      return new Message(0, MetadataVersion.V4, MessageHeader.Schema, header);\n    }\n    if (header instanceof RecordBatch) {\n      return new Message(bodyLength, MetadataVersion.V4, MessageHeader.RecordBatch, header);\n    }\n    if (header instanceof DictionaryBatch) {\n      return new Message(bodyLength, MetadataVersion.V4, MessageHeader.DictionaryBatch, header);\n    }\n    throw new Error(`Unrecognized Message header: ${header}`);\n  }\n  get type() {\n    return this.headerType;\n  }\n  get version() {\n    return this._version;\n  }\n  get headerType() {\n    return this._headerType;\n  }\n  get bodyLength() {\n    return this._bodyLength;\n  }\n  header() {\n    return this._createHeader();\n  }\n  isSchema() {\n    return this.headerType === MessageHeader.Schema;\n  }\n  isRecordBatch() {\n    return this.headerType === MessageHeader.RecordBatch;\n  }\n  isDictionaryBatch() {\n    return this.headerType === MessageHeader.DictionaryBatch;\n  }\n}\n/**\n * @ignore\n * @private\n **/\nexport class RecordBatch {\n  get nodes() {\n    return this._nodes;\n  }\n  get length() {\n    return this._length;\n  }\n  get buffers() {\n    return this._buffers;\n  }\n  constructor(length, nodes, buffers) {\n    this._nodes = nodes;\n    this._buffers = buffers;\n    this._length = typeof length === 'number' ? length : length.low;\n  }\n}\n/**\n * @ignore\n * @private\n **/\nexport class DictionaryBatch {\n  get id() {\n    return this._id;\n  }\n  get data() {\n    return this._data;\n  }\n  get isDelta() {\n    return this._isDelta;\n  }\n  get length() {\n    return this.data.length;\n  }\n  get nodes() {\n    return this.data.nodes;\n  }\n  get buffers() {\n    return this.data.buffers;\n  }\n  constructor(data, id, isDelta = false) {\n    this._data = data;\n    this._isDelta = isDelta;\n    this._id = typeof id === 'number' ? id : id.low;\n  }\n}\n/**\n * @ignore\n * @private\n **/\nexport class BufferRegion {\n  constructor(offset, length) {\n    this.offset = typeof offset === 'number' ? offset : offset.low;\n    this.length = typeof length === 'number' ? length : length.low;\n  }\n}\n/**\n * @ignore\n * @private\n **/\nexport class FieldNode {\n  constructor(length, nullCount) {\n    this.length = typeof length === 'number' ? length : length.low;\n    this.nullCount = typeof nullCount === 'number' ? nullCount : nullCount.low;\n  }\n}\n/** @ignore */\nfunction messageHeaderFromJSON(message, type) {\n  return () => {\n    switch (type) {\n      case MessageHeader.Schema:\n        return Schema.fromJSON(message);\n      case MessageHeader.RecordBatch:\n        return RecordBatch.fromJSON(message);\n      case MessageHeader.DictionaryBatch:\n        return DictionaryBatch.fromJSON(message);\n    }\n    throw new Error(`Unrecognized Message type: { name: ${MessageHeader[type]}, type: ${type} }`);\n  };\n}\n/** @ignore */\nfunction decodeMessageHeader(message, type) {\n  return () => {\n    switch (type) {\n      case MessageHeader.Schema:\n        return Schema.decode(message.header(new _Schema()));\n      case MessageHeader.RecordBatch:\n        return RecordBatch.decode(message.header(new _RecordBatch()), message.version());\n      case MessageHeader.DictionaryBatch:\n        return DictionaryBatch.decode(message.header(new _DictionaryBatch()), message.version());\n    }\n    throw new Error(`Unrecognized Message type: { name: ${MessageHeader[type]}, type: ${type} }`);\n  };\n}\nField['encode'] = encodeField;\nField['decode'] = decodeField;\nField['fromJSON'] = fieldFromJSON;\nSchema['encode'] = encodeSchema;\nSchema['decode'] = decodeSchema;\nSchema['fromJSON'] = schemaFromJSON;\nRecordBatch['encode'] = encodeRecordBatch;\nRecordBatch['decode'] = decodeRecordBatch;\nRecordBatch['fromJSON'] = recordBatchFromJSON;\nDictionaryBatch['encode'] = encodeDictionaryBatch;\nDictionaryBatch['decode'] = decodeDictionaryBatch;\nDictionaryBatch['fromJSON'] = dictionaryBatchFromJSON;\nFieldNode['encode'] = encodeFieldNode;\nFieldNode['decode'] = decodeFieldNode;\nBufferRegion['encode'] = encodeBufferRegion;\nBufferRegion['decode'] = decodeBufferRegion;\n/** @ignore */\nfunction decodeSchema(_schema, dictionaries = new Map()) {\n  const fields = decodeSchemaFields(_schema, dictionaries);\n  return new Schema(fields, decodeCustomMetadata(_schema), dictionaries);\n}\n/** @ignore */\nfunction decodeRecordBatch(batch, version = MetadataVersion.V4) {\n  return new RecordBatch(batch.length(), decodeFieldNodes(batch), decodeBuffers(batch, version));\n}\n/** @ignore */\nfunction decodeDictionaryBatch(batch, version = MetadataVersion.V4) {\n  return new DictionaryBatch(RecordBatch.decode(batch.data(), version), batch.id(), batch.isDelta());\n}\n/** @ignore */\nfunction decodeBufferRegion(b) {\n  return new BufferRegion(b.offset(), b.length());\n}\n/** @ignore */\nfunction decodeFieldNode(f) {\n  return new FieldNode(f.length(), f.nullCount());\n}\n/** @ignore */\nfunction decodeFieldNodes(batch) {\n  const nodes = [];\n  for (let f, i = -1, j = -1, n = batch.nodesLength(); ++i < n;) {\n    if (f = batch.nodes(i)) {\n      nodes[++j] = FieldNode.decode(f);\n    }\n  }\n  return nodes;\n}\n/** @ignore */\nfunction decodeBuffers(batch, version) {\n  const bufferRegions = [];\n  for (let b, i = -1, j = -1, n = batch.buffersLength(); ++i < n;) {\n    if (b = batch.buffers(i)) {\n      // If this Arrow buffer was written before version 4,\n      // advance the buffer's bb_pos 8 bytes to skip past\n      // the now-removed page_id field\n      if (version < MetadataVersion.V4) {\n        b.bb_pos += 8 * (i + 1);\n      }\n      bufferRegions[++j] = BufferRegion.decode(b);\n    }\n  }\n  return bufferRegions;\n}\n/** @ignore */\nfunction decodeSchemaFields(schema, dictionaries) {\n  const fields = [];\n  for (let f, i = -1, j = -1, n = schema.fieldsLength(); ++i < n;) {\n    if (f = schema.fields(i)) {\n      fields[++j] = Field.decode(f, dictionaries);\n    }\n  }\n  return fields;\n}\n/** @ignore */\nfunction decodeFieldChildren(field, dictionaries) {\n  const children = [];\n  for (let f, i = -1, j = -1, n = field.childrenLength(); ++i < n;) {\n    if (f = field.children(i)) {\n      children[++j] = Field.decode(f, dictionaries);\n    }\n  }\n  return children;\n}\n/** @ignore */\nfunction decodeField(f, dictionaries) {\n  let id;\n  let field;\n  let type;\n  let keys;\n  let dictType;\n  let dictMeta;\n  // If no dictionary encoding\n  if (!dictionaries || !(dictMeta = f.dictionary())) {\n    type = decodeFieldType(f, decodeFieldChildren(f, dictionaries));\n    field = new Field(f.name(), type, f.nullable(), decodeCustomMetadata(f));\n  }\n  // tslint:disable\n  // If dictionary encoded and the first time we've seen this dictionary id, decode\n  // the data type and child fields, then wrap in a Dictionary type and insert the\n  // data type into the dictionary types map.\n  else if (!dictionaries.has(id = dictMeta.id().low)) {\n    // a dictionary index defaults to signed 32 bit int if unspecified\n    keys = (keys = dictMeta.indexType()) ? decodeIndexType(keys) : new Int32();\n    dictionaries.set(id, type = decodeFieldType(f, decodeFieldChildren(f, dictionaries)));\n    dictType = new Dictionary(type, keys, id, dictMeta.isOrdered());\n    field = new Field(f.name(), dictType, f.nullable(), decodeCustomMetadata(f));\n  }\n  // If dictionary encoded, and have already seen this dictionary Id in the schema, then reuse the\n  // data type and wrap in a new Dictionary type and field.\n  else {\n    // a dictionary index defaults to signed 32 bit int if unspecified\n    keys = (keys = dictMeta.indexType()) ? decodeIndexType(keys) : new Int32();\n    dictType = new Dictionary(dictionaries.get(id), keys, id, dictMeta.isOrdered());\n    field = new Field(f.name(), dictType, f.nullable(), decodeCustomMetadata(f));\n  }\n  return field || null;\n}\n/** @ignore */\nfunction decodeCustomMetadata(parent) {\n  const data = new Map();\n  if (parent) {\n    for (let entry, key, i = -1, n = parent.customMetadataLength() | 0; ++i < n;) {\n      if ((entry = parent.customMetadata(i)) && (key = entry.key()) != null) {\n        data.set(key, entry.value());\n      }\n    }\n  }\n  return data;\n}\n/** @ignore */\nfunction decodeIndexType(_type) {\n  return new Int(_type.isSigned(), _type.bitWidth());\n}\n/** @ignore */\nfunction decodeFieldType(f, children) {\n  const typeId = f.typeType();\n  switch (typeId) {\n    case Type.NONE:\n      return new Null();\n    case Type.Null:\n      return new Null();\n    case Type.Binary:\n      return new Binary();\n    case Type.Utf8:\n      return new Utf8();\n    case Type.Bool:\n      return new Bool();\n    case Type.List:\n      return new List((children || [])[0]);\n    case Type.Struct_:\n      return new Struct(children || []);\n  }\n  switch (typeId) {\n    case Type.Int:\n      {\n        const t = f.type(new Schema_.org.apache.arrow.flatbuf.Int());\n        return new Int(t.isSigned(), t.bitWidth());\n      }\n    case Type.FloatingPoint:\n      {\n        const t = f.type(new Schema_.org.apache.arrow.flatbuf.FloatingPoint());\n        return new Float(t.precision());\n      }\n    case Type.Decimal:\n      {\n        const t = f.type(new Schema_.org.apache.arrow.flatbuf.Decimal());\n        return new Decimal(t.scale(), t.precision());\n      }\n    case Type.Date:\n      {\n        const t = f.type(new Schema_.org.apache.arrow.flatbuf.Date());\n        return new Date_(t.unit());\n      }\n    case Type.Time:\n      {\n        const t = f.type(new Schema_.org.apache.arrow.flatbuf.Time());\n        return new Time(t.unit(), t.bitWidth());\n      }\n    case Type.Timestamp:\n      {\n        const t = f.type(new Schema_.org.apache.arrow.flatbuf.Timestamp());\n        return new Timestamp(t.unit(), t.timezone());\n      }\n    case Type.Interval:\n      {\n        const t = f.type(new Schema_.org.apache.arrow.flatbuf.Interval());\n        return new Interval(t.unit());\n      }\n    case Type.Union:\n      {\n        const t = f.type(new Schema_.org.apache.arrow.flatbuf.Union());\n        return new Union(t.mode(), t.typeIdsArray() || [], children || []);\n      }\n    case Type.FixedSizeBinary:\n      {\n        const t = f.type(new Schema_.org.apache.arrow.flatbuf.FixedSizeBinary());\n        return new FixedSizeBinary(t.byteWidth());\n      }\n    case Type.FixedSizeList:\n      {\n        const t = f.type(new Schema_.org.apache.arrow.flatbuf.FixedSizeList());\n        return new FixedSizeList(t.listSize(), (children || [])[0]);\n      }\n    case Type.Map:\n      {\n        const t = f.type(new Schema_.org.apache.arrow.flatbuf.Map());\n        return new Map_((children || [])[0], t.keysSorted());\n      }\n  }\n  throw new Error(`Unrecognized type: \"${Type[typeId]}\" (${typeId})`);\n}\n/** @ignore */\nfunction encodeSchema(b, schema) {\n  const fieldOffsets = schema.fields.map(f => Field.encode(b, f));\n  _Schema.startFieldsVector(b, fieldOffsets.length);\n  const fieldsVectorOffset = _Schema.createFieldsVector(b, fieldOffsets);\n  const metadataOffset = !(schema.metadata && schema.metadata.size > 0) ? -1 : _Schema.createCustomMetadataVector(b, [...schema.metadata].map(([k, v]) => {\n    const key = b.createString(`${k}`);\n    const val = b.createString(`${v}`);\n    _KeyValue.startKeyValue(b);\n    _KeyValue.addKey(b, key);\n    _KeyValue.addValue(b, val);\n    return _KeyValue.endKeyValue(b);\n  }));\n  _Schema.startSchema(b);\n  _Schema.addFields(b, fieldsVectorOffset);\n  _Schema.addEndianness(b, platformIsLittleEndian ? _Endianness.Little : _Endianness.Big);\n  if (metadataOffset !== -1) {\n    _Schema.addCustomMetadata(b, metadataOffset);\n  }\n  return _Schema.endSchema(b);\n}\n/** @ignore */\nfunction encodeField(b, field) {\n  let nameOffset = -1;\n  let typeOffset = -1;\n  let dictionaryOffset = -1;\n  let type = field.type;\n  let typeId = field.typeId;\n  if (!DataType.isDictionary(type)) {\n    typeOffset = typeAssembler.visit(type, b);\n  } else {\n    typeId = type.dictionary.typeId;\n    dictionaryOffset = typeAssembler.visit(type, b);\n    typeOffset = typeAssembler.visit(type.dictionary, b);\n  }\n  const childOffsets = (type.children || []).map(f => Field.encode(b, f));\n  const childrenVectorOffset = _Field.createChildrenVector(b, childOffsets);\n  const metadataOffset = !(field.metadata && field.metadata.size > 0) ? -1 : _Field.createCustomMetadataVector(b, [...field.metadata].map(([k, v]) => {\n    const key = b.createString(`${k}`);\n    const val = b.createString(`${v}`);\n    _KeyValue.startKeyValue(b);\n    _KeyValue.addKey(b, key);\n    _KeyValue.addValue(b, val);\n    return _KeyValue.endKeyValue(b);\n  }));\n  if (field.name) {\n    nameOffset = b.createString(field.name);\n  }\n  _Field.startField(b);\n  _Field.addType(b, typeOffset);\n  _Field.addTypeType(b, typeId);\n  _Field.addChildren(b, childrenVectorOffset);\n  _Field.addNullable(b, !!field.nullable);\n  if (nameOffset !== -1) {\n    _Field.addName(b, nameOffset);\n  }\n  if (dictionaryOffset !== -1) {\n    _Field.addDictionary(b, dictionaryOffset);\n  }\n  if (metadataOffset !== -1) {\n    _Field.addCustomMetadata(b, metadataOffset);\n  }\n  return _Field.endField(b);\n}\n/** @ignore */\nfunction encodeRecordBatch(b, recordBatch) {\n  const nodes = recordBatch.nodes || [];\n  const buffers = recordBatch.buffers || [];\n  _RecordBatch.startNodesVector(b, nodes.length);\n  nodes.slice().reverse().forEach(n => FieldNode.encode(b, n));\n  const nodesVectorOffset = b.endVector();\n  _RecordBatch.startBuffersVector(b, buffers.length);\n  buffers.slice().reverse().forEach(b_ => BufferRegion.encode(b, b_));\n  const buffersVectorOffset = b.endVector();\n  _RecordBatch.startRecordBatch(b);\n  _RecordBatch.addLength(b, new Long(recordBatch.length, 0));\n  _RecordBatch.addNodes(b, nodesVectorOffset);\n  _RecordBatch.addBuffers(b, buffersVectorOffset);\n  return _RecordBatch.endRecordBatch(b);\n}\n/** @ignore */\nfunction encodeDictionaryBatch(b, dictionaryBatch) {\n  const dataOffset = RecordBatch.encode(b, dictionaryBatch.data);\n  _DictionaryBatch.startDictionaryBatch(b);\n  _DictionaryBatch.addId(b, new Long(dictionaryBatch.id, 0));\n  _DictionaryBatch.addIsDelta(b, dictionaryBatch.isDelta);\n  _DictionaryBatch.addData(b, dataOffset);\n  return _DictionaryBatch.endDictionaryBatch(b);\n}\n/** @ignore */\nfunction encodeFieldNode(b, node) {\n  return _FieldNode.createFieldNode(b, new Long(node.length, 0), new Long(node.nullCount, 0));\n}\n/** @ignore */\nfunction encodeBufferRegion(b, node) {\n  return _Buffer.createBuffer(b, new Long(node.offset, 0), new Long(node.length, 0));\n}\n/** @ignore */\nconst platformIsLittleEndian = function () {\n  const buffer = new ArrayBuffer(2);\n  new DataView(buffer).setInt16(0, 256, true /* littleEndian */);\n  // Int16Array uses the platform's endianness.\n  return new Int16Array(buffer)[0] === 256;\n}();","map":{"version":3,"sources":["ipc/metadata/message.ts"],"names":[],"mappings":"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","sourcesContent":["// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { flatbuffers } from 'flatbuffers';\nimport * as Schema_ from '../../fb/Schema';\nimport * as Message_ from '../../fb/Message';\n\nimport { Schema, Field } from '../../schema';\nimport { toUint8Array } from '../../util/buffer';\nimport { ArrayBufferViewInput } from '../../util/buffer';\nimport { MessageHeader, MetadataVersion } from '../../enum';\nimport { instance as typeAssembler } from '../../visitor/typeassembler';\nimport { fieldFromJSON, schemaFromJSON, recordBatchFromJSON, dictionaryBatchFromJSON } from './json';\n\nimport Long = flatbuffers.Long;\nimport Builder = flatbuffers.Builder;\nimport ByteBuffer = flatbuffers.ByteBuffer;\nimport _Int = Schema_.org.apache.arrow.flatbuf.Int;\nimport Type = Schema_.org.apache.arrow.flatbuf.Type;\nimport _Field = Schema_.org.apache.arrow.flatbuf.Field;\nimport _Schema = Schema_.org.apache.arrow.flatbuf.Schema;\nimport _Buffer = Schema_.org.apache.arrow.flatbuf.Buffer;\nimport _Message = Message_.org.apache.arrow.flatbuf.Message;\nimport _KeyValue = Schema_.org.apache.arrow.flatbuf.KeyValue;\nimport _FieldNode = Message_.org.apache.arrow.flatbuf.FieldNode;\nimport _Endianness = Schema_.org.apache.arrow.flatbuf.Endianness;\nimport _RecordBatch = Message_.org.apache.arrow.flatbuf.RecordBatch;\nimport _DictionaryBatch = Message_.org.apache.arrow.flatbuf.DictionaryBatch;\nimport _DictionaryEncoding = Schema_.org.apache.arrow.flatbuf.DictionaryEncoding;\n\nimport {\n    DataType, Dictionary, TimeBitWidth,\n    Utf8, Binary, Decimal, FixedSizeBinary,\n    List, FixedSizeList, Map_, Struct, Union,\n    Bool, Null, Int, Float, Date_, Time, Interval, Timestamp, IntBitWidth, Int32, TKeys,\n} from '../../type';\n\n/**\n * @ignore\n * @private\n **/\nexport class Message<T extends MessageHeader = any> {\n\n    /** @nocollapse */\n    public static fromJSON<T extends MessageHeader>(msg: any, headerType: T): Message<T> {\n        const message = new Message(0, MetadataVersion.V4, headerType);\n        message._createHeader = messageHeaderFromJSON(msg, headerType);\n        return message;\n    }\n\n    /** @nocollapse */\n    public static decode(buf: ArrayBufferViewInput) {\n        buf = new ByteBuffer(toUint8Array(buf));\n        const _message = _Message.getRootAsMessage(buf);\n        const bodyLength: Long = _message.bodyLength()!;\n        const version: MetadataVersion = _message.version();\n        const headerType: MessageHeader = _message.headerType();\n        const message = new Message(bodyLength, version, headerType);\n        message._createHeader = decodeMessageHeader(_message, headerType);\n        return message;\n    }\n\n    /** @nocollapse */\n    public static encode<T extends MessageHeader>(message: Message<T>) {\n        let b = new Builder(), headerOffset = -1;\n        if (message.isSchema()) {\n            headerOffset = Schema.encode(b, message.header() as Schema);\n        } else if (message.isRecordBatch()) {\n            headerOffset = RecordBatch.encode(b, message.header() as RecordBatch);\n        } else if (message.isDictionaryBatch()) {\n            headerOffset = DictionaryBatch.encode(b, message.header() as DictionaryBatch);\n        }\n        _Message.startMessage(b);\n        _Message.addVersion(b, MetadataVersion.V4);\n        _Message.addHeader(b, headerOffset);\n        _Message.addHeaderType(b, message.headerType);\n        _Message.addBodyLength(b, new Long(message.bodyLength, 0));\n        _Message.finishMessageBuffer(b, _Message.endMessage(b));\n        return b.asUint8Array();\n    }\n\n    /** @nocollapse */\n    public static from(header: Schema | RecordBatch | DictionaryBatch, bodyLength = 0) {\n        if (header instanceof Schema) {\n            return new Message(0, MetadataVersion.V4, MessageHeader.Schema, header);\n        }\n        if (header instanceof RecordBatch) {\n            return new Message(bodyLength, MetadataVersion.V4, MessageHeader.RecordBatch, header);\n        }\n        if (header instanceof DictionaryBatch) {\n            return new Message(bodyLength, MetadataVersion.V4, MessageHeader.DictionaryBatch, header);\n        }\n        throw new Error(`Unrecognized Message header: ${header}`);\n    }\n\n    // @ts-ignore\n    public body: Uint8Array;\n    protected _headerType: T;\n    protected _bodyLength: number;\n    protected _version: MetadataVersion;\n    public get type() { return this.headerType; }\n    public get version() { return this._version; }\n    public get headerType() { return this._headerType; }\n    public get bodyLength() { return this._bodyLength; }\n    // @ts-ignore\n    protected _createHeader: MessageHeaderDecoder;\n    public header() { return this._createHeader<T>(); }\n    public isSchema(): this is Message<MessageHeader.Schema> { return this.headerType === MessageHeader.Schema; }\n    public isRecordBatch(): this is Message<MessageHeader.RecordBatch> { return this.headerType === MessageHeader.RecordBatch; }\n    public isDictionaryBatch(): this is Message<MessageHeader.DictionaryBatch> { return this.headerType === MessageHeader.DictionaryBatch; }\n\n    constructor(bodyLength: Long | number, version: MetadataVersion, headerType: T, header?: any) {\n        this._version = version;\n        this._headerType = headerType;\n        this.body = new Uint8Array(0);\n        header && (this._createHeader = () => header);\n        this._bodyLength = typeof bodyLength === 'number' ? bodyLength : bodyLength.low;\n    }\n}\n\n/**\n * @ignore\n * @private\n **/\nexport class RecordBatch {\n    protected _length: number;\n    protected _nodes: FieldNode[];\n    protected _buffers: BufferRegion[];\n    public get nodes() { return this._nodes; }\n    public get length() { return this._length; }\n    public get buffers() { return this._buffers; }\n    constructor(length: Long | number, nodes: FieldNode[], buffers: BufferRegion[]) {\n        this._nodes = nodes;\n        this._buffers = buffers;\n        this._length = typeof length === 'number' ? length : length.low;\n    }\n}\n\n/**\n * @ignore\n * @private\n **/\nexport class DictionaryBatch {\n\n    protected _id: number;\n    protected _isDelta: boolean;\n    protected _data: RecordBatch;\n    public get id() { return this._id; }\n    public get data() { return this._data; }\n    public get isDelta() { return this._isDelta; }\n    public get length(): number { return this.data.length; }\n    public get nodes(): FieldNode[] { return this.data.nodes; }\n    public get buffers(): BufferRegion[] { return this.data.buffers; }\n\n    constructor(data: RecordBatch, id: Long | number, isDelta: boolean = false) {\n        this._data = data;\n        this._isDelta = isDelta;\n        this._id = typeof id === 'number' ? id : id.low;\n    }\n}\n\n/**\n * @ignore\n * @private\n **/\nexport class BufferRegion {\n    public offset: number;\n    public length: number;\n    constructor(offset: Long | number, length: Long | number) {\n        this.offset = typeof offset === 'number' ? offset : offset.low;\n        this.length = typeof length === 'number' ? length : length.low;\n    }\n}\n\n/**\n * @ignore\n * @private\n **/\nexport class FieldNode {\n    public length: number;\n    public nullCount: number;\n    constructor(length: Long | number, nullCount: Long | number) {\n        this.length = typeof length === 'number' ? length : length.low;\n        this.nullCount = typeof nullCount === 'number' ? nullCount : nullCount.low;\n    }\n}\n\n/** @ignore */\nfunction messageHeaderFromJSON(message: any, type: MessageHeader) {\n    return (() => {\n        switch (type) {\n            case MessageHeader.Schema: return Schema.fromJSON(message);\n            case MessageHeader.RecordBatch: return RecordBatch.fromJSON(message);\n            case MessageHeader.DictionaryBatch: return DictionaryBatch.fromJSON(message);\n        }\n        throw new Error(`Unrecognized Message type: { name: ${MessageHeader[type]}, type: ${type} }`);\n    }) as MessageHeaderDecoder;\n}\n\n/** @ignore */\nfunction decodeMessageHeader(message: _Message, type: MessageHeader) {\n    return (() => {\n        switch (type) {\n            case MessageHeader.Schema: return Schema.decode(message.header(new _Schema())!);\n            case MessageHeader.RecordBatch: return RecordBatch.decode(message.header(new _RecordBatch())!, message.version());\n            case MessageHeader.DictionaryBatch: return DictionaryBatch.decode(message.header(new _DictionaryBatch())!, message.version());\n        }\n        throw new Error(`Unrecognized Message type: { name: ${MessageHeader[type]}, type: ${type} }`);\n    }) as MessageHeaderDecoder;\n}\n\nField['encode'] = encodeField;\nField['decode'] = decodeField;\nField['fromJSON'] = fieldFromJSON;\n\nSchema['encode'] = encodeSchema;\nSchema['decode'] = decodeSchema;\nSchema['fromJSON'] = schemaFromJSON;\n\nRecordBatch['encode'] = encodeRecordBatch;\nRecordBatch['decode'] = decodeRecordBatch;\nRecordBatch['fromJSON'] = recordBatchFromJSON;\n\nDictionaryBatch['encode'] = encodeDictionaryBatch;\nDictionaryBatch['decode'] = decodeDictionaryBatch;\nDictionaryBatch['fromJSON'] = dictionaryBatchFromJSON;\n\nFieldNode['encode'] = encodeFieldNode;\nFieldNode['decode'] = decodeFieldNode;\n\nBufferRegion['encode'] = encodeBufferRegion;\nBufferRegion['decode'] = decodeBufferRegion;\n\ndeclare module '../../schema' {\n    namespace Field {\n        export { encodeField as encode };\n        export { decodeField as decode };\n        export { fieldFromJSON as fromJSON };\n    }\n    namespace Schema {\n        export { encodeSchema as encode };\n        export { decodeSchema as decode };\n        export { schemaFromJSON as fromJSON };\n    }\n}\n\ndeclare module './message' {\n    namespace RecordBatch {\n        export { encodeRecordBatch as encode };\n        export { decodeRecordBatch as decode };\n        export { recordBatchFromJSON as fromJSON };\n    }\n    namespace DictionaryBatch {\n        export { encodeDictionaryBatch as encode };\n        export { decodeDictionaryBatch as decode };\n        export { dictionaryBatchFromJSON as fromJSON };\n    }\n    namespace FieldNode {\n        export { encodeFieldNode as encode };\n        export { decodeFieldNode as decode };\n    }\n    namespace BufferRegion {\n        export { encodeBufferRegion as encode };\n        export { decodeBufferRegion as decode };\n    }\n}\n\n/** @ignore */\nfunction decodeSchema(_schema: _Schema, dictionaries: Map<number, DataType> = new Map()) {\n    const fields = decodeSchemaFields(_schema, dictionaries);\n    return new Schema(fields, decodeCustomMetadata(_schema), dictionaries);\n}\n\n/** @ignore */\nfunction decodeRecordBatch(batch: _RecordBatch, version = MetadataVersion.V4) {\n    return new RecordBatch(batch.length(), decodeFieldNodes(batch), decodeBuffers(batch, version));\n}\n\n/** @ignore */\nfunction decodeDictionaryBatch(batch: _DictionaryBatch, version = MetadataVersion.V4) {\n    return new DictionaryBatch(RecordBatch.decode(batch.data()!, version), batch.id(), batch.isDelta());\n}\n\n/** @ignore */\nfunction decodeBufferRegion(b: _Buffer) {\n    return new BufferRegion(b.offset(), b.length());\n}\n\n/** @ignore */\nfunction decodeFieldNode(f: _FieldNode) {\n    return new FieldNode(f.length(), f.nullCount());\n}\n\n/** @ignore */\nfunction decodeFieldNodes(batch: _RecordBatch) {\n    const nodes = [] as FieldNode[];\n    for (let f, i = -1, j = -1, n = batch.nodesLength(); ++i < n;) {\n        if (f = batch.nodes(i)) {\n            nodes[++j] = FieldNode.decode(f);\n        }\n    }\n    return nodes;\n}\n\n/** @ignore */\nfunction decodeBuffers(batch: _RecordBatch, version: MetadataVersion) {\n    const bufferRegions = [] as BufferRegion[];\n    for (let b, i = -1, j = -1, n = batch.buffersLength(); ++i < n;) {\n        if (b = batch.buffers(i)) {\n        // If this Arrow buffer was written before version 4,\n        // advance the buffer's bb_pos 8 bytes to skip past\n        // the now-removed page_id field\n        if (version < MetadataVersion.V4) {\n                b.bb_pos += (8 * (i + 1));\n            }\n            bufferRegions[++j] = BufferRegion.decode(b);\n        }\n    }\n    return bufferRegions;\n}\n\n/** @ignore */\nfunction decodeSchemaFields(schema: _Schema, dictionaries?: Map<number, DataType>) {\n    const fields = [] as Field[];\n    for (let f, i = -1, j = -1, n = schema.fieldsLength(); ++i < n;) {\n        if (f = schema.fields(i)) {\n            fields[++j] = Field.decode(f, dictionaries);\n        }\n    }\n    return fields;\n}\n\n/** @ignore */\nfunction decodeFieldChildren(field: _Field, dictionaries?: Map<number, DataType>): Field[] {\n    const children = [] as Field[];\n    for (let f, i = -1, j = -1, n = field.childrenLength(); ++i < n;) {\n        if (f = field.children(i)) {\n            children[++j] = Field.decode(f, dictionaries);\n        }\n    }\n    return children;\n}\n\n/** @ignore */\nfunction decodeField(f: _Field, dictionaries?: Map<number, DataType>) {\n\n    let id: number;\n    let field: Field | void;\n    let type: DataType<any>;\n    let keys: _Int | TKeys | null;\n    let dictType: Dictionary;\n    let dictMeta: _DictionaryEncoding | null;\n\n    // If no dictionary encoding\n    if (!dictionaries || !(dictMeta = f.dictionary())) {\n        type = decodeFieldType(f, decodeFieldChildren(f, dictionaries));\n        field = new Field(f.name()!, type, f.nullable(), decodeCustomMetadata(f));\n    }\n    // tslint:disable\n    // If dictionary encoded and the first time we've seen this dictionary id, decode\n    // the data type and child fields, then wrap in a Dictionary type and insert the\n    // data type into the dictionary types map.\n    else if (!dictionaries.has(id = dictMeta.id().low)) {\n        // a dictionary index defaults to signed 32 bit int if unspecified\n        keys = (keys = dictMeta.indexType()) ? decodeIndexType(keys) as TKeys : new Int32();\n        dictionaries.set(id, type = decodeFieldType(f, decodeFieldChildren(f, dictionaries)));\n        dictType = new Dictionary(type, keys, id, dictMeta.isOrdered());\n        field = new Field(f.name()!, dictType, f.nullable(), decodeCustomMetadata(f));\n    }\n    // If dictionary encoded, and have already seen this dictionary Id in the schema, then reuse the\n    // data type and wrap in a new Dictionary type and field.\n    else {\n        // a dictionary index defaults to signed 32 bit int if unspecified\n        keys = (keys = dictMeta.indexType()) ? decodeIndexType(keys) as TKeys : new Int32();\n        dictType = new Dictionary(dictionaries.get(id)!, keys, id, dictMeta.isOrdered());\n        field = new Field(f.name()!, dictType, f.nullable(), decodeCustomMetadata(f));\n    }\n    return field || null;\n}\n\n/** @ignore */\nfunction decodeCustomMetadata(parent?: _Schema | _Field | null) {\n    const data = new Map<string, string>();\n    if (parent) {\n        for (let entry, key, i = -1, n = parent.customMetadataLength() | 0; ++i < n;) {\n            if ((entry = parent.customMetadata(i)) && (key = entry.key()) != null) {\n                data.set(key, entry.value()!);\n            }\n        }\n    }\n    return data;\n}\n\n/** @ignore */\nfunction decodeIndexType(_type: _Int) {\n    return new Int(_type.isSigned(), _type.bitWidth() as IntBitWidth);\n}\n\n/** @ignore */\nfunction decodeFieldType(f: _Field, children?: Field[]): DataType<any> {\n\n    const typeId = f.typeType();\n\n    switch (typeId) {\n        case Type.NONE:    return new Null();\n        case Type.Null:    return new Null();\n        case Type.Binary:  return new Binary();\n        case Type.Utf8:    return new Utf8();\n        case Type.Bool:    return new Bool();\n        case Type.List:    return new List((children || [])[0]);\n        case Type.Struct_: return new Struct(children || []);\n    }\n\n    switch (typeId) {\n        case Type.Int: {\n            const t = f.type(new Schema_.org.apache.arrow.flatbuf.Int())!;\n            return new Int(t.isSigned(), t.bitWidth());\n        }\n        case Type.FloatingPoint: {\n            const t = f.type(new Schema_.org.apache.arrow.flatbuf.FloatingPoint())!;\n            return new Float(t.precision());\n        }\n        case Type.Decimal: {\n            const t = f.type(new Schema_.org.apache.arrow.flatbuf.Decimal())!;\n            return new Decimal(t.scale(), t.precision());\n        }\n        case Type.Date: {\n            const t = f.type(new Schema_.org.apache.arrow.flatbuf.Date())!;\n            return new Date_(t.unit());\n        }\n        case Type.Time: {\n            const t = f.type(new Schema_.org.apache.arrow.flatbuf.Time())!;\n            return new Time(t.unit(), t.bitWidth() as TimeBitWidth);\n        }\n        case Type.Timestamp: {\n            const t = f.type(new Schema_.org.apache.arrow.flatbuf.Timestamp())!;\n            return new Timestamp(t.unit(), t.timezone());\n        }\n        case Type.Interval: {\n            const t = f.type(new Schema_.org.apache.arrow.flatbuf.Interval())!;\n            return new Interval(t.unit());\n        }\n        case Type.Union: {\n            const t = f.type(new Schema_.org.apache.arrow.flatbuf.Union())!;\n            return new Union(t.mode(), t.typeIdsArray() || [], children || []);\n        }\n        case Type.FixedSizeBinary: {\n            const t = f.type(new Schema_.org.apache.arrow.flatbuf.FixedSizeBinary())!;\n            return new FixedSizeBinary(t.byteWidth());\n        }\n        case Type.FixedSizeList: {\n            const t = f.type(new Schema_.org.apache.arrow.flatbuf.FixedSizeList())!;\n            return new FixedSizeList(t.listSize(), (children || [])[0]);\n        }\n        case Type.Map: {\n            const t = f.type(new Schema_.org.apache.arrow.flatbuf.Map())!;\n            return new Map_((children || [])[0], t.keysSorted());\n        }\n    }\n    throw new Error(`Unrecognized type: \"${Type[typeId]}\" (${typeId})`);\n}\n\n/** @ignore */\nfunction encodeSchema(b: Builder, schema: Schema) {\n\n    const fieldOffsets = schema.fields.map((f) => Field.encode(b, f));\n\n    _Schema.startFieldsVector(b, fieldOffsets.length);\n\n    const fieldsVectorOffset = _Schema.createFieldsVector(b, fieldOffsets);\n\n    const metadataOffset = !(schema.metadata && schema.metadata.size > 0) ? -1 :\n        _Schema.createCustomMetadataVector(b, [...schema.metadata].map(([k, v]) => {\n            const key = b.createString(`${k}`);\n            const val = b.createString(`${v}`);\n            _KeyValue.startKeyValue(b);\n            _KeyValue.addKey(b, key);\n            _KeyValue.addValue(b, val);\n            return _KeyValue.endKeyValue(b);\n        }));\n\n    _Schema.startSchema(b);\n    _Schema.addFields(b, fieldsVectorOffset);\n    _Schema.addEndianness(b, platformIsLittleEndian ? _Endianness.Little : _Endianness.Big);\n\n    if (metadataOffset !== -1) { _Schema.addCustomMetadata(b, metadataOffset); }\n\n    return _Schema.endSchema(b);\n}\n\n/** @ignore */\nfunction encodeField(b: Builder, field: Field) {\n\n    let nameOffset = -1;\n    let typeOffset = -1;\n    let dictionaryOffset = -1;\n\n    let type = field.type;\n    let typeId: Type = <any> field.typeId;\n\n    if (!DataType.isDictionary(type)) {\n        typeOffset = typeAssembler.visit(type, b)!;\n    } else {\n        typeId = type.dictionary.typeId;\n        dictionaryOffset = typeAssembler.visit(type, b)!;\n        typeOffset = typeAssembler.visit(type.dictionary, b)!;\n    }\n\n    const childOffsets = (type.children || []).map((f: Field) => Field.encode(b, f));\n    const childrenVectorOffset = _Field.createChildrenVector(b, childOffsets);\n\n    const metadataOffset = !(field.metadata && field.metadata.size > 0) ? -1 :\n        _Field.createCustomMetadataVector(b, [...field.metadata].map(([k, v]) => {\n            const key = b.createString(`${k}`);\n            const val = b.createString(`${v}`);\n            _KeyValue.startKeyValue(b);\n            _KeyValue.addKey(b, key);\n            _KeyValue.addValue(b, val);\n            return _KeyValue.endKeyValue(b);\n        }));\n\n    if (field.name) {\n        nameOffset = b.createString(field.name);\n    }\n\n    _Field.startField(b);\n    _Field.addType(b, typeOffset);\n    _Field.addTypeType(b, typeId);\n    _Field.addChildren(b, childrenVectorOffset);\n    _Field.addNullable(b, !!field.nullable);\n\n    if (nameOffset !== -1) { _Field.addName(b, nameOffset); }\n    if (dictionaryOffset !== -1) { _Field.addDictionary(b, dictionaryOffset); }\n    if (metadataOffset !== -1) { _Field.addCustomMetadata(b, metadataOffset); }\n\n    return _Field.endField(b);\n}\n\n/** @ignore */\nfunction encodeRecordBatch(b: Builder, recordBatch: RecordBatch) {\n\n    const nodes = recordBatch.nodes || [];\n    const buffers = recordBatch.buffers || [];\n\n    _RecordBatch.startNodesVector(b, nodes.length);\n    nodes.slice().reverse().forEach((n) => FieldNode.encode(b, n));\n\n    const nodesVectorOffset = b.endVector();\n\n    _RecordBatch.startBuffersVector(b, buffers.length);\n    buffers.slice().reverse().forEach((b_) => BufferRegion.encode(b, b_));\n\n    const buffersVectorOffset = b.endVector();\n\n    _RecordBatch.startRecordBatch(b);\n    _RecordBatch.addLength(b, new Long(recordBatch.length, 0));\n    _RecordBatch.addNodes(b, nodesVectorOffset);\n    _RecordBatch.addBuffers(b, buffersVectorOffset);\n    return _RecordBatch.endRecordBatch(b);\n}\n\n/** @ignore */\nfunction encodeDictionaryBatch(b: Builder, dictionaryBatch: DictionaryBatch) {\n    const dataOffset = RecordBatch.encode(b, dictionaryBatch.data);\n    _DictionaryBatch.startDictionaryBatch(b);\n    _DictionaryBatch.addId(b, new Long(dictionaryBatch.id, 0));\n    _DictionaryBatch.addIsDelta(b, dictionaryBatch.isDelta);\n    _DictionaryBatch.addData(b, dataOffset);\n    return _DictionaryBatch.endDictionaryBatch(b);\n}\n\n/** @ignore */\nfunction encodeFieldNode(b: Builder, node: FieldNode) {\n    return _FieldNode.createFieldNode(b, new Long(node.length, 0), new Long(node.nullCount, 0));\n}\n\n/** @ignore */\nfunction encodeBufferRegion(b: Builder, node: BufferRegion) {\n    return _Buffer.createBuffer(b, new Long(node.offset, 0), new Long(node.length, 0));\n}\n\n/** @ignore */\nconst platformIsLittleEndian = (function() {\n    const buffer = new ArrayBuffer(2);\n    new DataView(buffer).setInt16(0, 256, true /* littleEndian */);\n    // Int16Array uses the platform's endianness.\n    return new Int16Array(buffer)[0] === 256;\n})();\n\n/** @ignore */\ntype MessageHeaderDecoder = <T extends MessageHeader>() => T extends MessageHeader.Schema ? Schema\n                                                         : T extends MessageHeader.RecordBatch ? RecordBatch\n                                                         : T extends MessageHeader.DictionaryBatch ? DictionaryBatch : never;\n"]},"metadata":{},"sourceType":"module"}