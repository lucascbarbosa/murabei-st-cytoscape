{"ast":null,"code":"import{Streamlit}from\"streamlit-component-lib\";// @ts-ignore\nimport cytoscape from'cytoscape';// @ts-ignore\nimport fcose from'cytoscape-fcose';// @ts-ignore\nimport klay from'cytoscape-klay';cytoscape.use(fcose);cytoscape.use(klay);const div=document.body.appendChild(document.createElement(\"div\"));let args='';function updateComponent(cy){Streamlit.setComponentValue({'nodes':cy.$('node:selected').map(x=>x['_private']['data']['id']),'edges':cy.$('edge:selected').map(x=>x['_private']['data']['id'])});}/**\n * The component's render function. This will be called immediately after\n * the component is initially loaded, and then again every time the\n * component gets new data from Python.\n */function onRender(event){// Get the RenderData from the event\nconst data=event.detail;let newArgs=JSON.stringify(data.args);if(!data.args[\"key\"]||args!==newArgs){args=newArgs;// Update the dimension of the graph's container\ndiv.style.width=data.args[\"width\"];div.style.height=data.args[\"height\"];// Take into account the Streamlit theme\nlet nodeColor=[];if(data.theme){var _data$theme,_data$theme2,_data$theme3,_data$theme4,_data$theme5,_data$theme6;if((_data$theme=data.theme)===null||_data$theme===void 0?void 0:_data$theme.backgroundColor){div.style.background=data.theme.backgroundColor;}nodeColor=[{selector:\"node:selected\",style:{backgroundColor:(_data$theme2=data.theme)===null||_data$theme2===void 0?void 0:_data$theme2.primaryColor}},{selector:\"node\",style:{color:(_data$theme3=data.theme)===null||_data$theme3===void 0?void 0:_data$theme3.textColor,fontFamily:(_data$theme4=data.theme)===null||_data$theme4===void 0?void 0:_data$theme4.font}},{selector:\"edge:selected\",style:{targetArrowColor:(_data$theme5=data.theme)===null||_data$theme5===void 0?void 0:_data$theme5.primaryColor,lineColor:(_data$theme6=data.theme)===null||_data$theme6===void 0?void 0:_data$theme6.primaryColor}}];}//Create the Cytoscape Graph\nlet cy=cytoscape({container:div,elements:data.args[\"elements\"],style:data.args[\"stylesheet\"].concat(nodeColor),layout:data.args[\"layout\"],selectionType:data.args[\"selectionType\"],userZoomingEnabled:data.args[\"userZoomingEnabled\"],userPanningEnabled:data.args[\"userPanningEnabled\"],minZoom:data.args[\"minZoom\"],maxZoom:data.args[\"maxZoom\"],wheelSensitivity:data.args[\"wheelSensitivity\"]}).on('select unselect',function(){updateComponent(cy);});updateComponent(cy);}Streamlit.setFrameHeight();}// Attach our `onRender` handler to Streamlit's render event.\nStreamlit.events.addEventListener(Streamlit.RENDER_EVENT,onRender);// Tell Streamlit we're ready to start receiving data. We won't get our\n// first RENDER_EVENT until we call this function.\nStreamlit.setComponentReady();// Finally, tell Streamlit to update our initial height. We omit the\n// `height` parameter here to have it default to our scrollHeight.\nStreamlit.setFrameHeight();","map":{"version":3,"names":["Streamlit","cytoscape","fcose","klay","use","div","document","body","appendChild","createElement","args","updateComponent","cy","setComponentValue","$","map","x","onRender","event","data","detail","newArgs","JSON","stringify","style","width","height","nodeColor","theme","_data$theme","_data$theme2","_data$theme3","_data$theme4","_data$theme5","_data$theme6","backgroundColor","background","selector","primaryColor","color","textColor","fontFamily","font","targetArrowColor","lineColor","container","elements","concat","layout","selectionType","userZoomingEnabled","userPanningEnabled","minZoom","maxZoom","wheelSensitivity","on","setFrameHeight","events","addEventListener","RENDER_EVENT","setComponentReady"],"sources":["/home/lbarbosa/Documents/Github/murabei-st-cytoscape/murabei_st_cytoscape/frontend/src/index.tsx"],"sourcesContent":["import {\n  Streamlit,\n  RenderData\n} from \"streamlit-component-lib\"\n// @ts-ignore\nimport cytoscape from 'cytoscape';\n// @ts-ignore\nimport fcose from 'cytoscape-fcose';\n// @ts-ignore\nimport klay from 'cytoscape-klay';\n\ncytoscape.use(fcose);\ncytoscape.use(klay);\n\nconst div = document.body.appendChild(document.createElement(\"div\"));\nlet args = '';\n\nfunction updateComponent(cy: any) {\n  Streamlit.setComponentValue({\n    'nodes': cy.$('node:selected').map((x: any) => x['_private']['data']['id']),\n    'edges': cy.$('edge:selected').map((x: any) => x['_private']['data']['id'])\n  })\n}\n\n/**\n * The component's render function. This will be called immediately after\n * the component is initially loaded, and then again every time the\n * component gets new data from Python.\n */\nfunction onRender(event: Event): void {\n  // Get the RenderData from the event\n  const data = (event as CustomEvent<RenderData>).detail\n  let newArgs = JSON.stringify(data.args);\n  if (!data.args[\"key\"] || args !== newArgs) {\n    args = newArgs;\n\n    // Update the dimension of the graph's container\n    div.style.width = data.args[\"width\"];\n    div.style.height = data.args[\"height\"];\n\n    // Take into account the Streamlit theme\n    let nodeColor: any[] = [];\n    if (data.theme) {\n      if (data.theme?.backgroundColor) {\n        div.style.background = data.theme.backgroundColor;\n      }\n      nodeColor = [{\n        selector: \"node:selected\",\n        style: {\n          backgroundColor: data.theme?.primaryColor\n        }\n      }, {\n        selector: \"node\",\n        style: {\n          color: data.theme?.textColor,\n          fontFamily: data.theme?.font\n        }\n      }, {\n        selector: \"edge:selected\",\n        style: {\n          targetArrowColor: data.theme?.primaryColor,\n          lineColor: data.theme?.primaryColor\n        }\n      }]\n    }\n\n    //Create the Cytoscape Graph\n    let cy = cytoscape({\n      container: div,\n      elements: data.args[\"elements\"],\n      style: data.args[\"stylesheet\"].concat(nodeColor),\n      layout: data.args[\"layout\"],\n      selectionType: data.args[\"selectionType\"],\n      userZoomingEnabled: data.args[\"userZoomingEnabled\"],\n      userPanningEnabled: data.args[\"userPanningEnabled\"],\n      minZoom: data.args[\"minZoom\"],\n      maxZoom: data.args[\"maxZoom\"],\n      wheelSensitivity: data.args[\"wheelSensitivity\"],\n    }).on('select unselect', function () {\n      updateComponent(cy);\n    });\n    updateComponent(cy);\n  }\n\n  Streamlit.setFrameHeight()\n}\n\n// Attach our `onRender` handler to Streamlit's render event.\nStreamlit.events.addEventListener(Streamlit.RENDER_EVENT, onRender)\n\n// Tell Streamlit we're ready to start receiving data. We won't get our\n// first RENDER_EVENT until we call this function.\nStreamlit.setComponentReady()\n\n// Finally, tell Streamlit to update our initial height. We omit the\n// `height` parameter here to have it default to our scrollHeight.\nStreamlit.setFrameHeight()\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}