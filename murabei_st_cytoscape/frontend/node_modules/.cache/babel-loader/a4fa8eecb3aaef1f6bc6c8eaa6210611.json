{"ast":null,"code":"import { Streamlit } from \"streamlit-component-lib\";\n// @ts-ignore\nimport cytoscape from 'cytoscape';\n// @ts-ignore\nimport fcose from 'cytoscape-fcose';\n// @ts-ignore\nimport klay from 'cytoscape-klay';\ncytoscape.use(fcose);\ncytoscape.use(klay);\nconst div = document.body.appendChild(document.createElement(\"div\"));\nlet args = '';\nfunction updateComponent(cy) {\n  Streamlit.setComponentValue({\n    'nodes': cy.$('node:selected').map(x => x['_private']['data']['id']),\n    'edges': cy.$('edge:selected').map(x => x['_private']['data']['id'])\n  });\n}\n\n/**\n * The component's render function. This will be called immediately after\n * the component is initially loaded, and then again every time the\n * component gets new data from Python.\n */\nfunction onRender(event) {\n  // Get the RenderData from the event\n  const data = event.detail;\n  let newArgs = JSON.stringify(data.args);\n  if (!data.args[\"key\"] || args !== newArgs) {\n    args = newArgs;\n\n    // Update the dimension of the graph's container\n    div.style.width = data.args[\"width\"];\n    div.style.height = data.args[\"height\"];\n\n    // Take into account the Streamlit theme\n    let nodeColor = [];\n    if (data.theme) {\n      var _data$theme, _data$theme2, _data$theme3, _data$theme4, _data$theme5, _data$theme6;\n      if ((_data$theme = data.theme) === null || _data$theme === void 0 ? void 0 : _data$theme.backgroundColor) {\n        div.style.background = data.theme.backgroundColor;\n      }\n      nodeColor = [{\n        selector: \"node:selected\",\n        style: {\n          backgroundColor: (_data$theme2 = data.theme) === null || _data$theme2 === void 0 ? void 0 : _data$theme2.primaryColor\n        }\n      }, {\n        selector: \"node\",\n        style: {\n          color: (_data$theme3 = data.theme) === null || _data$theme3 === void 0 ? void 0 : _data$theme3.textColor,\n          fontFamily: (_data$theme4 = data.theme) === null || _data$theme4 === void 0 ? void 0 : _data$theme4.font\n        }\n      }, {\n        selector: \"edge:selected\",\n        style: {\n          targetArrowColor: (_data$theme5 = data.theme) === null || _data$theme5 === void 0 ? void 0 : _data$theme5.primaryColor,\n          lineColor: (_data$theme6 = data.theme) === null || _data$theme6 === void 0 ? void 0 : _data$theme6.primaryColor\n        }\n      }];\n    }\n\n    //Create the Cytoscape Graph\n    let cy = cytoscape({\n      container: div,\n      elements: data.args[\"elements\"],\n      style: data.args[\"stylesheet\"].concat(nodeColor),\n      layout: data.args[\"layout\"],\n      selectionType: data.args[\"selectionType\"],\n      userZoomingEnabled: data.args[\"userZoomingEnabled\"],\n      userPanningEnabled: data.args[\"userPanningEnabled\"],\n      minZoom: data.args[\"minZoom\"],\n      maxZoom: data.args[\"maxZoom\"],\n      wheelSensitivity: data.args[\"wheelSensitivity\"]\n    }).on('select unselect', function () {\n      updateComponent(cy);\n    });\n    updateComponent(cy);\n  }\n  Streamlit.setFrameHeight();\n}\n\n// Attach our `onRender` handler to Streamlit's render event.\nStreamlit.events.addEventListener(Streamlit.RENDER_EVENT, onRender);\n\n// Tell Streamlit we're ready to start receiving data. We won't get our\n// first RENDER_EVENT until we call this function.\nStreamlit.setComponentReady();\n\n// Finally, tell Streamlit to update our initial height. We omit the\n// `height` parameter here to have it default to our scrollHeight.\nStreamlit.setFrameHeight();","map":{"version":3,"names":["Streamlit","cytoscape","fcose","klay","use","div","document","body","appendChild","createElement","args","updateComponent","cy","setComponentValue","$","map","x","onRender","event","data","detail","newArgs","JSON","stringify","style","width","height","nodeColor","theme","_data$theme","_data$theme2","_data$theme3","_data$theme4","_data$theme5","_data$theme6","backgroundColor","background","selector","primaryColor","color","textColor","fontFamily","font","targetArrowColor","lineColor","container","elements","concat","layout","selectionType","userZoomingEnabled","userPanningEnabled","minZoom","maxZoom","wheelSensitivity","on","setFrameHeight","events","addEventListener","RENDER_EVENT","setComponentReady"],"sources":["/home/lbarbosa/Documents/Github/murabei-st-cytoscape/murabei_st_cytoscape/frontend/src/index.tsx"],"sourcesContent":["import {\n  Streamlit,\n  RenderData\n} from \"streamlit-component-lib\"\n// @ts-ignore\nimport cytoscape from 'cytoscape';\n// @ts-ignore\nimport fcose from 'cytoscape-fcose';\n// @ts-ignore\nimport klay from 'cytoscape-klay';\n\ncytoscape.use(fcose);\ncytoscape.use(klay);\n\nconst div = document.body.appendChild(document.createElement(\"div\"));\nlet args = '';\n\nfunction updateComponent(cy: any) {\n  Streamlit.setComponentValue({\n    'nodes': cy.$('node:selected').map((x: any) => x['_private']['data']['id']),\n    'edges': cy.$('edge:selected').map((x: any) => x['_private']['data']['id'])\n  })\n}\n\n/**\n * The component's render function. This will be called immediately after\n * the component is initially loaded, and then again every time the\n * component gets new data from Python.\n */\nfunction onRender(event: Event): void {\n  // Get the RenderData from the event\n  const data = (event as CustomEvent<RenderData>).detail\n  let newArgs = JSON.stringify(data.args);\n  if (!data.args[\"key\"] || args !== newArgs) {\n    args = newArgs;\n\n    // Update the dimension of the graph's container\n    div.style.width = data.args[\"width\"];\n    div.style.height = data.args[\"height\"];\n\n    // Take into account the Streamlit theme\n    let nodeColor: any[] = [];\n    if (data.theme) {\n      if (data.theme?.backgroundColor) {\n        div.style.background = data.theme.backgroundColor;\n      }\n      nodeColor = [{\n        selector: \"node:selected\",\n        style: {\n          backgroundColor: data.theme?.primaryColor\n        }\n      }, {\n        selector: \"node\",\n        style: {\n          color: data.theme?.textColor,\n          fontFamily: data.theme?.font\n        }\n      }, {\n        selector: \"edge:selected\",\n        style: {\n          targetArrowColor: data.theme?.primaryColor,\n          lineColor: data.theme?.primaryColor\n        }\n      }]\n    }\n\n    //Create the Cytoscape Graph\n    let cy = cytoscape({\n      container: div,\n      elements: data.args[\"elements\"],\n      style: data.args[\"stylesheet\"].concat(nodeColor),\n      layout: data.args[\"layout\"],\n      selectionType: data.args[\"selectionType\"],\n      userZoomingEnabled: data.args[\"userZoomingEnabled\"],\n      userPanningEnabled: data.args[\"userPanningEnabled\"],\n      minZoom: data.args[\"minZoom\"],\n      maxZoom: data.args[\"maxZoom\"],\n      wheelSensitivity: data.args[\"wheelSensitivity\"],\n    }).on('select unselect', function () {\n      updateComponent(cy);\n    });\n    updateComponent(cy);\n  }\n\n  Streamlit.setFrameHeight()\n}\n\n// Attach our `onRender` handler to Streamlit's render event.\nStreamlit.events.addEventListener(Streamlit.RENDER_EVENT, onRender)\n\n// Tell Streamlit we're ready to start receiving data. We won't get our\n// first RENDER_EVENT until we call this function.\nStreamlit.setComponentReady()\n\n// Finally, tell Streamlit to update our initial height. We omit the\n// `height` parameter here to have it default to our scrollHeight.\nStreamlit.setFrameHeight()\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}